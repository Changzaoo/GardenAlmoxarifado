import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../firebaseConfig';

/**
 * Cria uma notifica√ß√£o no Firestore
 * @param {string} usuarioId - ID do usu√°rio que receber√° a notifica√ß√£o
 * @param {string} tipo - Tipo da notifica√ß√£o: 'tarefa' | 'emprestimo' | 'ferramenta'
 * @param {string} titulo - T√≠tulo da notifica√ß√£o
 * @param {string} mensagem - Mensagem da notifica√ß√£o
 * @param {object} dados - Dados adicionais espec√≠ficos do tipo
 */
export const createNotification = async (usuarioId, tipo, titulo, mensagem, dados = {}) => {
  try {

    await addDoc(collection(db, 'notificacoes'), {
      usuarioId,
      tipo,
      titulo,
      mensagem,
      lida: false,
      timestamp: serverTimestamp(),
      dados
    });

  } catch (error) {
    console.error('Erro ao criar notifica√ß√£o:', error);
    throw error;
  }
};

/**
 * Cria notifica√ß√£o quando uma nova tarefa √© atribu√≠da
 * @param {string} usuarioId - ID do usu√°rio atribu√≠do
 * @param {string} nomeTarefa - Nome/t√≠tulo da tarefa
 * @param {string} prioridade - Prioridade da tarefa
 * @param {object} tarefaData - Dados completos da tarefa
 */
export const notifyNewTask = async (usuarioId, nomeTarefa, prioridade = 'normal', tarefaData = {}) => {
  const titulo = 'üìã Nova tarefa atribu√≠da';
  const mensagem = `Voc√™ foi designado para a tarefa "${nomeTarefa}"${prioridade === 'alta' ? ' (Prioridade Alta)' : ''}`;
  
  await createNotification(usuarioId, 'tarefa', titulo, mensagem, {
    nomeTarefa,
    prioridade,
    ...tarefaData
  });
};

/**
 * Cria notifica√ß√£o quando um empr√©stimo √© feito no nome do usu√°rio
 * @param {string} usuarioId - ID do funcion√°rio que pegou emprestado
 * @param {array} ferramentas - Lista de ferramentas emprestadas
 * @param {string} responsavel - Nome do respons√°vel pelo empr√©stimo
 * @param {object} emprestimoData - Dados completos do empr√©stimo
 */
export const notifyNewLoan = async (usuarioId, ferramentas, responsavel, emprestimoData = {}) => {
  const ferramentasText = Array.isArray(ferramentas) 
    ? ferramentas.map(f => typeof f === 'string' ? f : f.nome).slice(0, 3).join(', ')
    : ferramentas;
  
  const maisFerramentas = Array.isArray(ferramentas) && ferramentas.length > 3 
    ? ` e mais ${ferramentas.length - 3}` 
    : '';
  
  const titulo = 'üîß Ferramentas emprestadas';
  const mensagem = `${ferramentasText}${maisFerramentas} foram emprestadas em seu nome${responsavel ? ` por ${responsavel}` : ''}`;
  
  await createNotification(usuarioId, 'emprestimo', titulo, mensagem, {
    ferramentas: Array.isArray(ferramentas) ? ferramentas : [ferramentas],
    responsavel,
    ...emprestimoData
  });
};

/**
 * Cria notifica√ß√£o quando uma ferramenta espec√≠fica √© atribu√≠da
 * @param {string} usuarioId - ID do usu√°rio
 * @param {string} nomeFerramenta - Nome da ferramenta
 * @param {string} acao - A√ß√£o realizada: 'atribuida' | 'devolvida' | 'danificada'
 * @param {object} ferramentaData - Dados da ferramenta
 */
export const notifyToolAction = async (usuarioId, nomeFerramenta, acao, ferramentaData = {}) => {
  let titulo = '';
  let mensagem = '';
  
  switch (acao) {
    case 'atribuida':
      titulo = 'üõ†Ô∏è Ferramenta atribu√≠da';
      mensagem = `A ferramenta "${nomeFerramenta}" foi atribu√≠da a voc√™`;
      break;
    case 'devolvida':
      titulo = '‚úÖ Devolu√ß√£o registrada';
      mensagem = `A ferramenta "${nomeFerramenta}" foi devolvida`;
      break;
    case 'danificada':
      titulo = '‚ö†Ô∏è Ferramenta danificada';
      mensagem = `A ferramenta "${nomeFerramenta}" foi reportada como danificada`;
      break;
    default:
      titulo = 'üîî Atualiza√ß√£o de ferramenta';
      mensagem = `Atualiza√ß√£o sobre a ferramenta "${nomeFerramenta}"`;
  }
  
  await createNotification(usuarioId, 'ferramenta', titulo, mensagem, {
    nomeFerramenta,
    acao,
    ...ferramentaData
  });
};

/**
 * Cria notifica√ß√£o quando uma tarefa est√° pr√≥xima do prazo
 * @param {string} usuarioId - ID do usu√°rio
 * @param {string} nomeTarefa - Nome da tarefa
 * @param {Date} prazo - Data do prazo
 */
export const notifyTaskDeadline = async (usuarioId, nomeTarefa, prazo) => {
  const titulo = '‚è∞ Prazo pr√≥ximo';
  const mensagem = `A tarefa "${nomeTarefa}" est√° pr√≥xima do prazo`;
  
  await createNotification(usuarioId, 'tarefa', titulo, mensagem, {
    nomeTarefa,
    prazo
  });
};

export default {
  createNotification,
  notifyNewTask,
  notifyNewLoan,
  notifyToolAction,
  notifyTaskDeadline
};
