/**
 * üõ°Ô∏è Sistema de Valida√ß√£o de Usu√°rios
 * 
 * Impede a cria√ß√£o de usu√°rios com login "admin" ou varia√ß√µes
 * em todos os pontos do sistema: cria√ß√£o manual, sincroniza√ß√£o e rota√ß√£o
 */

// Lista de logins proibidos (bloqueados permanentemente)
const LOGINS_PROIBIDOS = [
  'admin',
  'administrator',
  'administrador',
  'root',
  'superuser',
  'super',
  'system',
  'sistema'
];

// Lista de nomes proibidos (bloqueados permanentemente)
const NOMES_PROIBIDOS = [
  'administrador',
  'administrator',
  'admin',
  'root',
  'system',
  'sistema'
];

/**
 * üîç Validar login de usu√°rio
 * @param {string} login - Login a ser validado
 * @returns {Object} { valido: boolean, erro: string }
 */
export const validarLogin = (login) => {
  if (!login) {
    return {
      valido: false,
      erro: 'Login √© obrigat√≥rio'
    };
  }

  const loginNormalizado = login.trim().toLowerCase();

  // Verificar se est√° na lista de proibidos
  if (LOGINS_PROIBIDOS.includes(loginNormalizado)) {
    return {
      valido: false,
      erro: `‚ùå Login "${login}" est√° bloqueado por seguran√ßa. Use um nome de usu√°rio diferente.`
    };
  }

  // Verificar varia√ß√µes com n√∫meros/caracteres
  const loginSemNumeros = loginNormalizado.replace(/[0-9]/g, '');
  if (LOGINS_PROIBIDOS.includes(loginSemNumeros)) {
    return {
      valido: false,
      erro: `‚ùå Login "${login}" cont√©m termo bloqueado. Use um nome de usu√°rio diferente.`
    };
  }

  // Verificar se cont√©m "admin" em qualquer parte
  if (loginNormalizado.includes('admin')) {
    return {
      valido: false,
      erro: `‚ùå Login n√£o pode conter "admin". Use um nome de usu√°rio diferente.`
    };
  }

  // Validar formato b√°sico
  if (loginNormalizado.length < 3) {
    return {
      valido: false,
      erro: 'Login deve ter pelo menos 3 caracteres'
    };
  }

  // Validar caracteres permitidos (letras, n√∫meros, underscore, h√≠fen)
  const regexValido = /^[a-z0-9_-]+$/;
  if (!regexValido.test(loginNormalizado)) {
    return {
      valido: false,
      erro: 'Login deve conter apenas letras, n√∫meros, _ ou -'
    };
  }

  return {
    valido: true,
    erro: null
  };
};

/**
 * üîç Validar nome de usu√°rio
 * @param {string} nome - Nome a ser validado
 * @returns {Object} { valido: boolean, erro: string }
 */
export const validarNome = (nome) => {
  if (!nome) {
    return {
      valido: false,
      erro: 'Nome √© obrigat√≥rio'
    };
  }

  const nomeNormalizado = nome.trim().toLowerCase();

  // Verificar se est√° na lista de proibidos
  if (NOMES_PROIBIDOS.includes(nomeNormalizado)) {
    return {
      valido: false,
      erro: `‚ùå Nome "${nome}" est√° bloqueado por seguran√ßa. Use um nome diferente.`
    };
  }

  // Verificar se cont√©m "admin" como palavra completa
  const palavras = nomeNormalizado.split(/\s+/);
  if (palavras.some(palavra => NOMES_PROIBIDOS.includes(palavra))) {
    return {
      valido: false,
      erro: `‚ùå Nome n√£o pode conter termos bloqueados. Use um nome diferente.`
    };
  }

  return {
    valido: true,
    erro: null
  };
};

/**
 * üîç Validar dados completos do usu√°rio
 * @param {Object} dadosUsuario - Dados do usu√°rio
 * @returns {Object} { valido: boolean, erros: string[] }
 */
export const validarDadosUsuario = (dadosUsuario) => {
  const erros = [];

  // Validar login
  const validacaoLogin = validarLogin(dadosUsuario.usuario);
  if (!validacaoLogin.valido) {
    erros.push(validacaoLogin.erro);
  }

  // Validar nome
  const validacaoNome = validarNome(dadosUsuario.nome);
  if (!validacaoNome.valido) {
    erros.push(validacaoNome.erro);
  }

  return {
    valido: erros.length === 0,
    erros
  };
};

/**
 * üö´ Verificar se usu√°rio deve ser bloqueado na sincroniza√ß√£o
 * @param {Object} usuarioData - Dados do usu√°rio
 * @returns {boolean} true se deve ser bloqueado
 */
export const deveBloquearNaSincronizacao = (usuarioData) => {
  if (!usuarioData) return false;

  // Verificar login
  const login = usuarioData.usuario || usuarioData.login || '';
  const loginNormalizado = login.trim().toLowerCase();
  
  if (LOGINS_PROIBIDOS.includes(loginNormalizado)) {
    console.warn(`üö´ [Sincroniza√ß√£o] Bloqueando usu√°rio com login proibido: ${login}`);
    return true;
  }

  if (loginNormalizado.includes('admin')) {
    console.warn(`üö´ [Sincroniza√ß√£o] Bloqueando usu√°rio com "admin" no login: ${login}`);
    return true;
  }

  // Verificar nome
  const nome = usuarioData.nome || '';
  const nomeNormalizado = nome.trim().toLowerCase();
  
  if (NOMES_PROIBIDOS.includes(nomeNormalizado)) {
    console.warn(`üö´ [Sincroniza√ß√£o] Bloqueando usu√°rio com nome proibido: ${nome}`);
    return true;
  }

  return false;
};

/**
 * üìù Log de tentativa de cria√ß√£o bloqueada
 * @param {string} contexto - Contexto onde foi bloqueado (ex: 'cria√ß√£o manual', 'sincroniza√ß√£o')
 * @param {Object} dadosUsuario - Dados do usu√°rio
 */
export const logBloqueio = (contexto, dadosUsuario) => {
  const timestamp = new Date().toISOString();
  const log = {
    timestamp,
    contexto,
    usuario: dadosUsuario.usuario || 'N/A',
    nome: dadosUsuario.nome || 'N/A',
    nivel: dadosUsuario.nivel,
    motivo: 'Login ou nome cont√©m termo bloqueado'
  };

  console.warn('üö´ [BLOQUEIO DE USU√ÅRIO]', log);

  // Salvar no localStorage para auditoria
  try {
    const bloqueios = JSON.parse(localStorage.getItem('bloqueios_usuarios') || '[]');
    bloqueios.push(log);
    
    // Manter apenas √∫ltimos 100 registros
    if (bloqueios.length > 100) {
      bloqueios.shift();
    }
    
    localStorage.setItem('bloqueios_usuarios', JSON.stringify(bloqueios));
  } catch (error) {
    console.error('Erro ao salvar log de bloqueio:', error);
  }

  return log;
};

/**
 * üìä Obter estat√≠sticas de bloqueios
 * @returns {Object} Estat√≠sticas de bloqueios
 */
export const getEstatisticasBloqueios = () => {
  try {
    const bloqueios = JSON.parse(localStorage.getItem('bloqueios_usuarios') || '[]');
    
    const estatisticas = {
      total: bloqueios.length,
      porContexto: {},
      ultimos10: bloqueios.slice(-10).reverse()
    };

    bloqueios.forEach(bloqueio => {
      const contexto = bloqueio.contexto || 'desconhecido';
      estatisticas.porContexto[contexto] = (estatisticas.porContexto[contexto] || 0) + 1;
    });

    return estatisticas;
  } catch (error) {
    console.error('Erro ao obter estat√≠sticas:', error);
    return { total: 0, porContexto: {}, ultimos10: [] };
  }
};

/**
 * üóëÔ∏è Limpar logs de bloqueio
 */
export const limparLogsBloqueios = () => {
  try {
    localStorage.removeItem('bloqueios_usuarios');
    console.log('‚úÖ Logs de bloqueios limpos');
    return true;
  } catch (error) {
    console.error('Erro ao limpar logs:', error);
    return false;
  }
};

/**
 * üéØ Exportar constantes para uso externo
 */
export const CONSTANTES_VALIDACAO = {
  LOGINS_PROIBIDOS,
  NOMES_PROIBIDOS
};

export default {
  validarLogin,
  validarNome,
  validarDadosUsuario,
  deveBloquearNaSincronizacao,
  logBloqueio,
  getEstatisticasBloqueios,
  limparLogsBloqueios,
  CONSTANTES_VALIDACAO
};
