import React, { useState } from 'react';
import { updateDoc, doc, Timestamp } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { 
  CheckCircle2, 
  PlayCircle, 
  StopCircle,
  AlertCircle,
  MessageSquare,
  Clock,
  User,
  Tag,
  Eye,
  CheckCircle,
  XCircle
} from 'lucide-react';
import { 
  ESTADOS_TAREFA, 
  ESTADOS_TAREFA_LABELS, 
  ESTADOS_TAREFA_COLORS,
  PRIORIDADE_TAREFA_COLORS 
} from '../constants/tarefas';
import { formatarData } from '../utils/dateUtils';
import { NIVEIS_PERMISSAO } from '../constants/permissoes';

const TarefaCard = ({ tarefa, usuario, onEdit }) => {
  const [isAddingObservacao, setIsAddingObservacao] = useState(false);
  const [observacao, setObservacao] = useState('');
  const [expandirObservacoes, setExpandirObservacoes] = useState(false);
  const [isAddingComentarioSupervisor, setIsAddingComentarioSupervisor] = useState(false);
  const [comentarioSupervisor, setComentarioSupervisor] = useState('');
  const [showSupervisorComments, setShowSupervisorComments] = useState(false);

  // Verifica permissões do usuário
  const isResponsavel = tarefa.responsaveis.includes(usuario.nome);
  const isSupervisorOrAdmin = usuario.nivel >= NIVEIS_PERMISSAO.SUPERVISOR;

  // Funções de manipulação de estado da tarefa
  const handleIniciarTarefa = async () => {
    try {
      await updateDoc(doc(db, 'tarefas', tarefa.id), {
        estado: ESTADOS_TAREFA.EM_ANDAMENTO,
        dataInicio: Timestamp.now(),
        dataAtualizacao: Timestamp.now()
      });
    } catch (error) {
      console.error('Erro ao iniciar tarefa:', error);
      alert('Erro ao iniciar tarefa');
    }
  };

  const handleConcluirTarefa = async () => {
    try {
      await updateDoc(doc(db, 'tarefas', tarefa.id), {
        estado: ESTADOS_TAREFA.CONCLUIDA,
        dataConclusao: Timestamp.now(),
        dataAtualizacao: Timestamp.now()
      });
    } catch (error) {
      console.error('Erro ao concluir tarefa:', error);
      alert('Erro ao concluir tarefa');
    }
  };

  const handleAddObservacao = async () => {
    if (!observacao.trim()) return;

    try {
      const novaObservacao = {
        texto: observacao,
        data: Timestamp.now(),
        autor: usuario.nome,
        nivel: usuario.nivel,
        usuarioId: usuario.id
      };

      await updateDoc(doc(db, 'tarefas', tarefa.id), {
        observacoes: [...(tarefa.observacoes || []), novaObservacao],
        dataAtualizacao: Timestamp.now()
      });

      setObservacao('');
      setIsAddingObservacao(false);
    } catch (error) {
      console.error('Erro ao adicionar observação:', error);
      alert('Erro ao adicionar observação');
    }
  };

  const handleVerificarTarefa = async () => {
    if (!comentarioSupervisor.trim() || !isSupervisorOrAdmin) return;

    try {
      const novoComentario = {
        texto: comentarioSupervisor,
        data: Timestamp.now(),
        autor: usuario.nome,
        nivel: usuario.nivel,
        tipo: 'verificacao'
      };

      await updateDoc(doc(db, 'tarefas', tarefa.id), {
        comentariosSupervisor: [...(tarefa.comentariosSupervisor || []), novoComentario],
        verificada: true,
        dataVerificacao: Timestamp.now(),
        dataAtualizacao: Timestamp.now()
      });

      setComentarioSupervisor('');
      setIsAddingComentarioSupervisor(false);
    } catch (error) {
      console.error('Erro ao verificar tarefa:', error);
      alert('Erro ao verificar tarefa');
    }
  };

  const filtrarObservacoesVisiveis = (observacoes) => {
    if (!observacoes) return [];
    return observacoes.filter(obs => {
      if (usuario.nivel >= NIVEIS_PERMISSAO.SUPERVISOR) return true;
      return obs.nivel === NIVEIS_PERMISSAO.FUNCIONARIO || obs.usuarioId === usuario.id;
    });
  };

  return (
    <div className="card-base p-4 mb-4">
      <div className="flex justify-between items-start mb-3">
        <div>
          <h3 className="text-base font-medium">{tarefa.titulo}</h3>
          <p className="text-sm text-muted mt-1">{tarefa.descricao}</p>
        </div>
        <span className={`px-3 py-1 rounded-full text-sm ${ESTADOS_TAREFA_COLORS[tarefa.estado]}`}>
          {ESTADOS_TAREFA_LABELS[tarefa.estado]}
        </span>
      </div>

      <div className="grid grid-cols-2 gap-4 text-sm text-muted mb-3">
        <div className="flex items-center gap-2">
          <Clock className="w-4 h-4" />
          <span>Prazo: {formatarData(tarefa.prazo)}</span>
        </div>
        <div className="flex items-center gap-2">
          <User className="w-4 h-4" />
          <span>Responsáveis: {tarefa.responsaveis.join(', ')}</span>
        </div>
      </div>

      {/* Ações da Tarefa */}
      <div className="flex gap-2 mt-4">
        {isResponsavel && tarefa.estado === ESTADOS_TAREFA.PENDENTE && (
          <button
            onClick={handleIniciarTarefa}
            className="btn-primary flex items-center gap-1"
          >
            <PlayCircle className="w-4 h-4" />
            Iniciar Tarefa
          </button>
        )}

        {isResponsavel && tarefa.estado === ESTADOS_TAREFA.EM_ANDAMENTO && (
          <button
            onClick={handleConcluirTarefa}
            className="btn-success flex items-center gap-1"
          >
            <CheckCircle2 className="w-4 h-4" />
            Concluir Tarefa
          </button>
        )}

        {/* Botão para adicionar observação */}
        <button
          onClick={() => setIsAddingObservacao(true)}
          className="btn-secondary flex items-center gap-1"
        >
          <MessageSquare className="w-4 h-4" />
          Adicionar Observação
        </button>

        {/* Verificação de Supervisor */}
        {isSupervisorOrAdmin && tarefa.estado === ESTADOS_TAREFA.CONCLUIDA && !tarefa.verificada && (
          <button
            onClick={() => setIsAddingComentarioSupervisor(true)}
            className="btn-primary flex items-center gap-1"
          >
            <Eye className="w-4 h-4" />
            Verificar Tarefa
          </button>
        )}
      </div>

      {/* Formulário de Observação */}
      {isAddingObservacao && (
        <div className="mt-4 space-y-2">
          <textarea
            value={observacao}
            onChange={(e) => setObservacao(e.target.value)}
            className="w-full px-3 py-2 border rounded"
            placeholder="Digite sua observação..."
            rows="2"
          />
          <div className="flex justify-end gap-2">
            <button
              onClick={() => setIsAddingObservacao(false)}
              className="btn-secondary"
            >
              Cancelar
            </button>
            <button
              onClick={handleAddObservacao}
              className="btn-primary"
            >
              Salvar
            </button>
          </div>
        </div>
      )}

      {/* Formulário de Comentário do Supervisor */}
      {isAddingComentarioSupervisor && (
        <div className="mt-4 space-y-2">
          <textarea
            value={comentarioSupervisor}
            onChange={(e) => setComentarioSupervisor(e.target.value)}
            className="w-full px-3 py-2 border rounded"
            placeholder="Digite seu comentário de verificação..."
            rows="2"
          />
          <div className="flex justify-end gap-2">
            <button
              onClick={() => setIsAddingComentarioSupervisor(false)}
              className="btn-secondary"
            >
              Cancelar
            </button>
            <button
              onClick={handleVerificarTarefa}
              className="btn-primary"
            >
              Verificar
            </button>
          </div>
        </div>
      )}

      {/* Lista de Observações */}
      {tarefa.observacoes?.length > 0 && (
        <div className="mt-4">
          <button
            onClick={() => setExpandirObservacoes(!expandirObservacoes)}
            className="text-sm text-accent-blue hover:underline"
          >
            {expandirObservacoes ? 'Ocultar observações' : `Ver ${filtrarObservacoesVisiveis(tarefa.observacoes).length} observações`}
          </button>
          
          {expandirObservacoes && (
            <div className="mt-2 space-y-2">
              {filtrarObservacoesVisiveis(tarefa.observacoes).map((obs, index) => (
                <div key={index} className="text-sm bg-dark-card p-2 rounded border border-dark-border">
                  <div className="flex justify-between text-muted">
                    <span className="font-medium">{obs.autor}</span>
                    <span>{formatarData(obs.data)}</span>
                  </div>
                  <p className="mt-1">{obs.texto}</p>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Comentários do Supervisor */}
      {isSupervisorOrAdmin && tarefa.comentariosSupervisor?.length > 0 && (
        <div className="mt-4">
          <button
            onClick={() => setShowSupervisorComments(!showSupervisorComments)}
            className="text-sm text-accent-blue hover:underline"
          >
            {showSupervisorComments ? 'Ocultar comentários do supervisor' : `Ver ${tarefa.comentariosSupervisor.length} comentários do supervisor`}
          </button>
          
          {showSupervisorComments && (
            <div className="mt-2 space-y-2">
              {tarefa.comentariosSupervisor.map((comment, index) => (
                <div key={index} className="text-sm bg-dark-card p-2 rounded border border-dark-border">
                  <div className="flex justify-between text-muted">
                    <span className="font-medium">{comment.autor}</span>
                    <span>{formatarData(comment.data)}</span>
                  </div>
                  <p className="mt-1">{comment.texto}</p>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default TarefaCard;
