import React, { useState, useEffect } from 'react';
import { collection, query, orderBy, onSnapshot, updateDoc, doc } from 'firebase/firestore';
import { db } from '../../firebaseConfig';
import { useAuth } from '../../hooks/useAuth';
import { Plus, Star, PauseCircle, PlayCircle, CheckCircle, Clock, CircleDotDashed, Pause } from 'lucide-react';
import { useToast } from '../ToastProvider';
import CriarTarefa from './CriarTarefa';
import DetalheTarefa from './DetalheTarefa';
import AvaliacaoTarefaModal from './AvaliacaoTarefaModal';

const NIVEIS_PERMISSAO = {
  FUNCIONARIO: 1,
  SUPERVISOR: 2,
  ADMIN: 3
};

const TarefasTab = ({ funcionarios = [] }) => {
  const { usuario } = useAuth();
  const { showToast } = useToast();
  const [tarefas, setTarefas] = useState([]);
  const [showCriarTarefa, setShowCriarTarefa] = useState(false);
  const [filtro, setFiltro] = useState('todas');
  const [tarefaSelecionada, setTarefaSelecionada] = useState(null);
  const [temposDecorridos, setTemposDecorridos] = useState({});
  const [showAvaliacaoModal, setShowAvaliacaoModal] = useState(false);
  const [tarefaParaAvaliacao, setTarefaParaAvaliacao] = useState(null);

  useEffect(() => {
    const q = query(collection(db, 'tarefas'), orderBy('dataCriacao', 'desc'));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const tarefasData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setTarefas(tarefasData);
      
      // Inicializar tempos decorridos
      const temposIniciais = {};
      tarefasData.forEach(tarefa => {
        if (tarefa.status === 'em_andamento' && tarefa.dataInicio) {
          const inicioData = new Date(tarefa.dataInicio);
          let tempo = new Date() - inicioData;
          if (tarefa.tempoPausado) {
            tempo -= tarefa.tempoPausado;
          }
          temposIniciais[tarefa.id] = tempo;
        }
      });
      setTemposDecorridos(temposIniciais);
    });

    return () => unsubscribe();
  }, []);

  // Atualizar tempos a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      setTemposDecorridos(prevTempos => {
        const novosTempos = { ...prevTempos };
        tarefas.forEach(tarefa => {
          if (tarefa.status === 'em_andamento' && tarefa.dataInicio) {
            const inicioData = new Date(tarefa.dataInicio);
            let tempo = new Date() - inicioData;
            if (tarefa.tempoPausado) {
              tempo -= tarefa.tempoPausado;
            }
            novosTempos[tarefa.id] = tempo;
          }
        });
        return novosTempos;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [tarefas]);

  // Função para calcular o tempo total de uma tarefa
  const calcularTempoTotal = (tarefa) => {
    if (!tarefa.dataInicio) return 0;
    
    const dataInicio = new Date(tarefa.dataInicio);
    const dataFim = new Date();
    let tempoTotal = dataFim - dataInicio;
    
    // Subtrair tempo pausado se houver
    if (tarefa.tempoPausado) {
      tempoTotal -= tarefa.tempoPausado;
    }
    
    return tempoTotal;
  };

  const handleIniciarTarefa = async (tarefaId) => {
    try {
      await updateDoc(doc(db, 'tarefas', tarefaId), {
        status: 'em_andamento',
        dataInicio: new Date().toISOString()
      });
      showToast('Tarefa iniciada com sucesso!', 'success');
    } catch (error) {
      console.error('Erro ao iniciar tarefa:', error);
      showToast('Erro ao iniciar tarefa', 'error');
    }
  };

  const handlePausarTarefa = async (tarefaId) => {
    try {
      const tarefa = tarefas.find(t => t.id === tarefaId);
      const tempoPausadoAnterior = tarefa.tempoPausado || 0;
      const tempoPausaAtual = new Date() - new Date(tarefa.dataInicio);
      
      await updateDoc(doc(db, 'tarefas', tarefaId), {
        status: 'pausada',
        dataPausa: new Date().toISOString(),
        tempoPausado: tempoPausadoAnterior + tempoPausaAtual
      });
      showToast('Tarefa pausada com sucesso!', 'success');
    } catch (error) {
      console.error('Erro ao pausar tarefa:', error);
      showToast('Erro ao pausar tarefa', 'error');
    }
  };

  const handleConcluirTarefa = async () => {
    if (!tarefaParaAvaliacao) return;
    
    try {
      const tempoTotal = calcularTempoTotal(tarefaParaAvaliacao);
      await updateDoc(doc(db, 'tarefas', tarefaParaAvaliacao.id), {
        status: 'concluida',
        dataConclusao: new Date().toISOString(),
        tempoTotal
      });
      setShowAvaliacaoModal(true);
    } catch (error) {
      console.error('Erro ao concluir tarefa:', error);
      showToast('Erro ao concluir tarefa', 'error');
      setTarefaParaAvaliacao(null);
    }
  };

  const handleAvaliacaoSubmit = async (avaliacao, comentario) => {
    if (!tarefaParaAvaliacao) return;

    try {
      const tarefaRef = doc(db, 'tarefas', tarefaParaAvaliacao.id);
      const updateData = {};

      if (usuario.nivel === NIVEIS_PERMISSAO.FUNCIONARIO) {
        updateData.avaliacaoFuncionario = avaliacao;
        updateData.comentarioFuncionario = comentario;
      } else if (usuario.nivel >= NIVEIS_PERMISSAO.SUPERVISOR) {
        updateData.avaliacaoSupervisor = avaliacao;
        updateData.comentarioSupervisor = comentario;
      }

      await updateDoc(tarefaRef, updateData);
      showToast('Avaliação registrada com sucesso!', 'success');
      
      if (usuario.nivel === NIVEIS_PERMISSAO.FUNCIONARIO) {
        setShowAvaliacaoModal(false);
      }
      
      setTarefaParaAvaliacao(null);
      setTarefaSelecionada(null);
    } catch (error) {
      console.error('Erro ao registrar avaliação:', error);
      showToast('Erro ao registrar avaliação', 'error');
    }
  };

  // Função para formatar tempo
  const formatarTempo = (ms) => {
    if (!ms) return '-';
    const segundos = Math.floor(ms / 1000);
    const minutos = Math.floor(segundos / 60);
    const horas = Math.floor(minutos / 60);
    
    if (horas > 0) {
      return `${horas}h ${minutos % 60}m`;
    } else if (minutos > 0) {
      return `${minutos}m ${segundos % 60}s`;
    } else {
      return `${segundos}s`;
    }
  };

  // Separar tarefas por status
  const tarefasPendentes = tarefas.filter(t => t.status === 'pendente');
  const tarefasEmAndamento = tarefas.filter(t => t.status === 'em_andamento');
  const tarefasPausadas = tarefas.filter(t => t.status === 'pausada');
  const tarefasConcluidas = tarefas.filter(t => t.status === 'concluida');

  // Filtrar tarefas
  const filtrarTarefas = (tarefasLista) => {
    return tarefasLista.filter(tarefa => {
      const isUserAssigned = tarefa.funcionariosIds?.includes(usuario.nome) || 
                            tarefa.funcionarios?.some(f => f.nome === usuario.nome);

      if (usuario.nivel === NIVEIS_PERMISSAO.FUNCIONARIO) {
        return isUserAssigned;
      }

      switch (filtro) {
        case 'minhas':
          return isUserAssigned;
        case 'todas':
        default:
          return true;
      }
    });
  };

  // Aplicar filtros
  const tarefasPendentesFiltradas = filtrarTarefas(tarefasPendentes);
  const tarefasEmAndamentoFiltradas = filtrarTarefas(tarefasEmAndamento);
  const tarefasPausadasFiltradas = filtrarTarefas(tarefasPausadas);
  const tarefasConcluidasFiltradas = filtrarTarefas(tarefasConcluidas);

  const renderTarefaCard = (tarefa) => (
    <div
      key={tarefa.id}
      onClick={() => setTarefaSelecionada(tarefa)}
      className="bg-[#192734] p-4 rounded-xl border border-[#38444D] hover:border-[#1DA1F2] transition-colors cursor-pointer"
    >
      <div className="flex justify-between items-start mb-4">
        <h3 className="text-lg font-semibold text-white">{tarefa.titulo}</h3>
        <div className="flex gap-2">
          {usuario.nivel >= NIVEIS_PERMISSAO.FUNCIONARIO && (
            <>
              {tarefa.status === 'pendente' && (
                <button
                  onClick={(e) => { e.stopPropagation(); handleIniciarTarefa(tarefa.id); }}
                  className="p-2 text-[#1DA1F2] hover:bg-[#1DA1F2]/10 rounded-full transition-colors"
                  title="Iniciar tarefa"
                >
                  <PlayCircle className="w-5 h-5" />
                </button>
              )}
              {tarefa.status === 'em_andamento' && (
                <button
                  onClick={(e) => { e.stopPropagation(); handlePausarTarefa(tarefa.id); }}
                  className="p-2 text-orange-500 hover:bg-orange-500/10 rounded-full transition-colors"
                  title="Pausar tarefa"
                >
                  <PauseCircle className="w-5 h-5" />
                </button>
              )}
              {tarefa.status === 'pausada' && (
                <button
                  onClick={(e) => { e.stopPropagation(); handleIniciarTarefa(tarefa.id); }}
                  className="p-2 text-[#1DA1F2] hover:bg-[#1DA1F2]/10 rounded-full transition-colors"
                  title="Retomar tarefa"
                >
                  <PlayCircle className="w-5 h-5" />
                </button>
              )}
            </>
          )}
        </div>
      </div>

      {/* Conteúdo do Card */}
      <div className="space-y-4">
        {/* Status e Prioridade */}
        <div className="flex flex-wrap gap-2">
          <span
            className={`px-3 py-1 rounded-full text-sm font-medium ${
              tarefa.status === 'pendente'
                ? 'bg-yellow-500/10 text-yellow-500'
                : tarefa.status === 'em_andamento'
                ? 'bg-blue-500/10 text-blue-500'
                : tarefa.status === 'pausada'
                ? 'bg-orange-500/10 text-orange-500'
                : 'bg-green-500/10 text-green-500'
            }`}
          >
            {tarefa.status === 'pendente'
              ? 'Pendente'
              : tarefa.status === 'em_andamento'
              ? 'Em Andamento'
              : tarefa.status === 'pausada'
              ? 'Pausada'
              : 'Concluída'}
          </span>
          <span className={`px-3 py-1 rounded-full text-sm font-medium ${
            tarefa.prioridade === 'alta'
              ? 'bg-red-500/10 text-red-500'
              : tarefa.prioridade === 'media'
              ? 'bg-yellow-500/10 text-yellow-500'
              : 'bg-green-500/10 text-green-500'
          }`}>
            Prioridade {tarefa.prioridade.charAt(0).toUpperCase() + tarefa.prioridade.slice(1)}
          </span>
        </div>

        {/* Tempo Decorrido */}
        {(tarefa.status === 'em_andamento' || tarefa.status === 'concluida' || tarefa.status === 'pausada') && (
          <div className="flex items-center gap-2 text-sm text-[#8899A6]">
            <Clock className="w-4 h-4" />
            {tarefa.status === 'concluida'
              ? `Tempo Total: ${formatarTempo(tarefa.tempoTotal)}`
              : tarefa.status === 'em_andamento'
              ? `Tempo Decorrido: ${formatarTempo(temposDecorridos[tarefa.id])}`
              : `Tempo em Pausa: ${formatarTempo(tarefa.tempoPausado || 0)}`}
          </div>
        )}

        {/* Funcionários Atribuídos */}
        <div className="flex flex-wrap gap-2">
          {tarefa.funcionarios?.slice(0, 3).map((func, index) => (
            <span
              key={func.nome}
              className="bg-[#253341] px-3 py-1 rounded-full text-white text-sm"
            >
              {func.nome}
            </span>
          ))}
          {(tarefa.funcionarios?.length || 0) > 3 && (
            <span className="bg-[#253341] px-3 py-1 rounded-full text-white text-sm">
              +{tarefa.funcionarios.length - 3}
            </span>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="p-4 space-y-6">
      {/* Cabeçalho */}
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <h1 className="text-2xl font-bold text-white">Tarefas</h1>
          <div className="flex gap-2">
            <button
              onClick={() => setFiltro('todas')}
              className={`px-4 py-2 rounded-full text-sm transition-colors ${
                filtro === 'todas'
                  ? 'bg-[#1DA1F2] text-white'
                  : 'text-[#8899A6] hover:bg-[#283340]'
              }`}
            >
              Todas as Tarefas
            </button>
            {usuario.nivel === NIVEIS_PERMISSAO.FUNCIONARIO && (
              <button
                onClick={() => setFiltro('minhas')}
                className={`px-4 py-2 rounded-full text-sm transition-colors ${
                  filtro === 'minhas'
                    ? 'bg-[#1DA1F2] text-white'
                    : 'text-[#8899A6] hover:bg-[#283340]'
                }`}
              >
                Minhas Tarefas
              </button>
            )}
          </div>
        </div>
        {usuario.nivel >= NIVEIS_PERMISSAO.SUPERVISOR && (
          <button
            onClick={() => setShowCriarTarefa(true)}
            className="flex items-center gap-2 px-4 py-2 bg-[#1DA1F2] text-white rounded-full hover:bg-[#1a91da] transition-colors"
          >
            <Plus className="w-5 h-5" />
            Nova Tarefa
          </button>
        )}
      </div>

      {/* Seções de Tarefas */}
      <div className="space-y-4">
        {/* Em Andamento */}
        {tarefasEmAndamentoFiltradas.length > 0 && (
          <div>
            <h2 className="text-xl font-bold text-white mb-3 flex items-center">
              <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
              Em Andamento ({tarefasEmAndamentoFiltradas.length})
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {tarefasEmAndamentoFiltradas.map(renderTarefaCard)}
            </div>
          </div>
        )}

        {/* Pendentes */}
        {tarefasPendentesFiltradas.length > 0 && (
          <div>
            <h2 className="text-xl font-bold text-white mb-3 flex items-center">
              <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
              Pendentes ({tarefasPendentesFiltradas.length})
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {tarefasPendentesFiltradas.map(renderTarefaCard)}
            </div>
          </div>
        )}

        {/* Pausadas */}
        {tarefasPausadasFiltradas.length > 0 && (
          <div>
            <h2 className="text-xl font-bold text-white mb-3 flex items-center">
              <div className="w-3 h-3 bg-orange-500 rounded-full mr-2"></div>
              Pausadas ({tarefasPausadasFiltradas.length})
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {tarefasPausadasFiltradas.map(renderTarefaCard)}
            </div>
          </div>
        )}

        {/* Concluídas */}
        {tarefasConcluidasFiltradas.length > 0 && (
          <div>
            <h2 className="text-xl font-bold text-white mb-4 flex items-center">
              <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
              Concluídas ({tarefasConcluidasFiltradas.length})
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {tarefasConcluidasFiltradas.map(renderTarefaCard)}
            </div>
          </div>
        )}
      </div>

      {/* Modais */}
      {showCriarTarefa && (
        <CriarTarefa 
          onClose={() => setShowCriarTarefa(false)} 
          funcionarios={funcionarios}
        />
      )}

      {tarefaSelecionada && (
        <DetalheTarefa
          tarefa={tarefaSelecionada}
          onClose={() => setTarefaSelecionada(null)}
          onConcluir={(tarefa) => {
            setTarefaParaAvaliacao(tarefa);
            handleConcluirTarefa();
          }}
        />
      )}

      {showAvaliacaoModal && tarefaParaAvaliacao && (
        <AvaliacaoTarefaModal
          isOpen={showAvaliacaoModal}
          onClose={() => {
            setShowAvaliacaoModal(false);
            setTarefaParaAvaliacao(null);
          }}
          onConfirm={handleAvaliacaoSubmit}
          titulo={usuario.nivel === NIVEIS_PERMISSAO.FUNCIONARIO 
            ? "Avalie a tarefa concluída" 
            : "Avalie o desempenho do colaborador"}
          tipoAvaliacao={usuario.nivel === NIVEIS_PERMISSAO.FUNCIONARIO ? "colaborador" : "supervisor"}
        />
      )}
    </div>
  );
};

export default TarefasTab;
