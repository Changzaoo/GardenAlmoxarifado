import React, { useState, useEffect } from 'react';
import { collection, addDoc, updateDoc, deleteDoc, doc, onSnapshot, getDocs } from 'firebase/firestore';
import { User, Package, Lock, Eye, EyeOff, AlertTriangle, Menu as MenuIcon, X, 
  BarChart3, Briefcase, ClipboardCheck, MessageCircle, ClipboardList, 
  Users, ShoppingCart, AlertCircle, History, ArrowRight, UserCog, Edit, 
  Moon, Sun, Shield } from 'lucide-react';
import { ToastProvider } from './ToastProvider';
import { db } from '../firebaseConfig';
import { FuncionariosProvider } from './Funcionarios/FuncionariosProvider';
import ThemeProvider, { useTheme } from './ThemeProvider';
import UserProfileModal from './Auth/UserProfileModal';
import { TarefasProvider } from './Tarefas/TarefasProvider';
import PWAUpdateAvailable from './PWAUpdateAvailable';
import { useNotifications } from '../hooks/useNotifications';
import { useAuth } from '../hooks/useAuth';
import { useIsMobile } from '../hooks/useIsMobile';
import Dashboard from './Dashboard/Dashboard';
import MeuInventarioTab from './Inventario/MeuInventarioTab';
import TarefasTab from './Tarefas/TarefasTab';
import SuporteTab from './Suporte/SuporteTab';
import InventarioTab from './Inventario/InventarioTab';
import EmprestimosTab from './Emprestimos/EmprestimosTab';
import FuncionariosTab from './Funcionarios/FuncionariosTab';
import ComprasTab from './Compras/ComprasTab';
import FerramentasDanificadasTab from './Danificadas/FerramentasDanificadasTab';
import FerramentasPerdidasTab from './Perdidas/FerramentasPerdidasTab';
import HistoricoEmprestimosTab from './Emprestimos/HistoricoEmprestimosTab';
import HistoricoTransferenciasTab from './Transferencias/HistoricoTransferenciasTab';
import UsuariosTab from './usuarios/UsuariosTab';
import { LoginForm } from './Auth/LoginForm';

// ===== SISTEMA DE COOKIES =====
const CookieManager = {
  setCookie: (name, value, days = 30) => {
    try {
      const expires = new Date();
      expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
      const expiresString = expires.toUTCString();
      
      const cookieValue = typeof value === 'object' ? JSON.stringify(value) : value;
      
      document.cookie = `${name}=${encodeURIComponent(cookieValue)};expires=${expiresString};path=/;SameSite=Strict`;
      
      console.log(`Cookie ${name} definido com sucesso`);
      return true;
    } catch (error) {
      console.error('Erro ao definir cookie:', error);
      return false;
    }
  },

  getCookie: (name) => {
    try {
      const nameEQ = name + "=";
      const cookies = document.cookie.split(';');
      
      for (let i = 0; i < cookies.length; i++) {
        let cookie = cookies[i];
        while (cookie.charAt(0) === ' ') cookie = cookie.substring(1, cookie.length);
        if (cookie.indexOf(nameEQ) === 0) {
          const value = decodeURIComponent(cookie.substring(nameEQ.length, cookie.length));
          try {
            return JSON.parse(value);
          } catch {
            return value;
          }
        }
      }
      return null;
    } catch (error) {
      console.error('Erro ao obter cookie:', error);
      return null;
    }
  },

  removeCookie: (name) => {
    try {
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;SameSite=Strict`;
      console.log(`Cookie ${name} removido com sucesso`);
      return true;
    } catch (error) {
      console.error('Erro ao remover cookie:', error);
      return false;
    }
  },

  areCookiesEnabled: () => {
    try {
      const testCookie = 'almoxarifado_test';
      CookieManager.setCookie(testCookie, 'test', 1);
      const isEnabled = CookieManager.getCookie(testCookie) === 'test';
      CookieManager.removeCookie(testCookie);
      return isEnabled;
    } catch {
      return false;
    }
  }
};

// Níveis de permissão
export const NIVEIS_PERMISSAO = {
  FUNCIONARIO: 1,
  SUPERVISOR: 2,
  GERENTE: 3,
  ADMIN: 4
};

export const NIVEIS_LABELS = {
  1: 'Funcionário',
  2: 'Supervisor/Encarregado', 
  3: 'Gerente',
  4: 'Administrador'
};

// Sistema de permissões
export const PermissionChecker = {
  canView: (userLevel) => {
    return userLevel >= NIVEIS_PERMISSAO.FUNCIONARIO;
  },

  canManageOperational: (userLevel) => {
    return userLevel > NIVEIS_PERMISSAO.FUNCIONARIO;
  },

  canManageEmployees: (userLevel) => {
    return userLevel > NIVEIS_PERMISSAO.FUNCIONARIO;
  },

  canManageUsers: (userLevel) => {
    return userLevel > NIVEIS_PERMISSAO.FUNCIONARIO && userLevel >= NIVEIS_PERMISSAO.GERENTE;
  },

  canCreateUserLevel: (userLevel, targetLevel) => {
    if (userLevel === NIVEIS_PERMISSAO.FUNCIONARIO) return false;
    if (userLevel === NIVEIS_PERMISSAO.ADMIN) return true;
    if (userLevel === NIVEIS_PERMISSAO.GERENTE) {
      return targetLevel <= NIVEIS_PERMISSAO.SUPERVISOR;
    }
    return false;
  },

  canEditUser: (userLevel, userId, targetUserId, targetUserLevel) => {
    if (userLevel === NIVEIS_PERMISSAO.FUNCIONARIO) return false;
    if (userId === targetUserId) return true;
    if (userLevel === NIVEIS_PERMISSAO.ADMIN) return true;
    if (userLevel === NIVEIS_PERMISSAO.GERENTE) {
      return targetUserLevel < NIVEIS_PERMISSAO.GERENTE;
    }
    return false;
  },

  canManagePurchases: (userLevel) => {
    return userLevel > NIVEIS_PERMISSAO.FUNCIONARIO;
  }
};

// Componente de Loading
const LoadingScreen = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center">
      <div className="text-center">
        <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
          <Package className="w-8 h-8 text-green-600 animate-pulse" />
        </div>
        <h1 className="text-2xl font-bold text-gray-800 mb-2">Almoxarifado Jardim</h1>
        <div className="flex items-center justify-center gap-2 mb-4">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600"></div>
          <p className="text-gray-600">Conectando ao Firebase...</p>
        </div>
        <div className="w-64 bg-gray-200 rounded-full h-2">
          <div className="bg-green-600 h-2 rounded-full animate-pulse" style={{width: '70%'}}></div>
        </div>
        <p className="text-sm text-gray-500 mt-2">Inicializando módulos de segurança...</p>
      </div>
    </div>
  );
};

// Componente de Aviso de Permissão
const PermissionDenied = ({ message = "Você não tem permissão para realizar esta ação." }) => {
  return (
    <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-center">
      <div className="flex items-center justify-center mb-2">
        <Shield className="w-8 h-8 text-red-600" />
      </div>
      <h3 className="text-lg font-medium text-red-800 mb-1">Acesso Negado</h3>
      <p className="text-red-600">{message}</p>
    </div>
  );
};

// Componente Sistema
const Sistema = () => {
  const { usuario = null, logout = () => {}, firebaseStatus = {} } = useAuth() || {};
  const { theme = 'light', toggleTheme = () => {} } = useTheme();
  const isMobile = useIsMobile();
  
  const [abaAtiva, setAbaAtiva] = useState('dashboard');
  const [menuOpen, setMenuOpen] = useState(false);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [inventario, setInventario] = useState([]);
  const [emprestimos, setEmprestimos] = useState([]);
  const [funcionarios, setFuncionarios] = useState([]);
  const [ferramentasDanificadas, setFerramentasDanificadas] = useState([]);
  const [ferramentasPerdidas, setFerramentasPerdidas] = useState([]);
  const [compras, setCompras] = useState([]);

  // Configuração das abas baseada em permissões
  const abas = React.useMemo(() => [
    { 
      id: 'dashboard', 
      nome: 'Dashboard', 
      icone: BarChart3,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    { 
      id: 'meu-inventario', 
      nome: 'Meu Inventário', 
      icone: Briefcase,
      permissao: () => true
    },
    { 
      id: 'tarefas', 
      nome: 'Tarefas', 
      icone: ClipboardCheck,
      permissao: () => true
    },
    { 
      id: 'suporte', 
      nome: 'Suporte', 
      icone: MessageCircle,
      permissao: () => true
    },
    { 
      id: 'inventario', 
      nome: 'Inventário', 
      icone: Package,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    { 
      id: 'emprestimos', 
      nome: 'Empréstimos', 
      icone: ClipboardList,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    { 
      id: 'funcionarios', 
      nome: 'Funcionários', 
      icone: Users,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    { 
      id: 'compras', 
      nome: 'Compras', 
      icone: ShoppingCart,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    { 
      id: 'danificadas', 
      nome: 'Ferramentas Danificadas', 
      icone: AlertTriangle,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    { 
      id: 'perdidas', 
      nome: 'Ferramentas Perdidas', 
      icone: AlertCircle,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    {
      id: 'historico-emprestimos',
      nome: 'Histórico de Empréstimos',
      icone: History,
      permissao: () => usuario?.nivel > NIVEIS_PERMISSAO.FUNCIONARIO
    },
    { 
      id: 'historico-transferencias', 
      nome: 'Histórico de Transferências', 
      icone: ArrowRight,
      permissao: () => usuario?.nivel >= NIVEIS_PERMISSAO.SUPERVISOR
    }
  ], [usuario?.nivel]);

  const podeVerUsuarios = [NIVEIS_PERMISSAO.ADMIN, NIVEIS_PERMISSAO.SUPERVISOR, NIVEIS_PERMISSAO.GERENTE].includes(usuario?.nivel);

  useEffect(() => {
    if (usuario?.nivel === NIVEIS_PERMISSAO.FUNCIONARIO) {
      setAbaAtiva('meu-inventario');
    } else {
      setAbaAtiva('dashboard');
    }
  }, [usuario?.nivel]);

  useEffect(() => {
    if (!usuario) return;
    
    const unsubscribe = onSnapshot(collection(db, 'inventario'), (snapshot) => {
      const itens = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setInventario(itens);
    }, (error) => {
      console.error('Erro no listener do inventário:', error);
    });
    
    return () => unsubscribe();
  }, [usuario]);

  // Carregar funcionários
  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'funcionarios'), (snapshot) => {
      const lista = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setFuncionarios(lista);
    }, (error) => {
      console.error('Erro no listener dos funcionários:', error);
    });
    
    return () => unsubscribe();
  }, []);

  // Carregar empréstimos
  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'emprestimos'), (snapshot) => {
      const lista = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setEmprestimos(lista);
    }, (error) => {
      console.error('Erro no listener dos empréstimos:', error);
    });
    
    return () => unsubscribe();
  }, []);

  // Carregar ferramentas danificadas
  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'ferramentas_danificadas'), (snapshot) => {
      const lista = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setFerramentasDanificadas(lista);
    }, (error) => {
      console.error('Erro no listener das ferramentas danificadas:', error);
    });
    
    return () => unsubscribe();
  }, []);

  // Carregar ferramentas perdidas
  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'ferramentas_perdidas'), (snapshot) => {
      const lista = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setFerramentasPerdidas(lista);
    }, (error) => {
      console.error('Erro no listener das ferramentas perdidas:', error);
    });
    
    return () => unsubscribe();
  }, []);

  // Carregar compras
  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'compras'), (snapshot) => {
      const lista = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setCompras(lista);
    }, (error) => {
      console.error('Erro no listener das compras:', error);
    });
    
    return () => unsubscribe();
  }, []);

  const toggleMenu = () => {
    setMenuOpen(!menuOpen);
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {isMobile && (
        <header className="bg-gray-50 dark:bg-gray-900 border-b dark:border-gray-700 fixed top-0 left-0 right-0 z-20">
          <div className="flex items-center justify-between p-4">
            <div className="flex items-center">
              <Package className="w-6 h-6 text-green-600 mr-2" />
              <h1 className="text-base font-bold text-gray-900 dark:text-white">Almoxarifado</h1>
            </div>
            <button
              onClick={toggleMenu}
              className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            >
              {menuOpen ? (
                <X className="w-6 h-6 text-gray-600 dark:text-gray-400" />
              ) : (
                <MenuIcon className="w-6 h-6 text-gray-600 dark:text-gray-400" />
              )}
            </button>
          </div>
        </header>
      )}

      <nav className={`${
        isMobile 
          ? `fixed inset-0 z-10 transform transition-transform duration-300 ease-in-out ${
              menuOpen ? 'translate-x-0' : '-translate-x-full'
            }`
          : 'w-64 fixed'
      } bg-gray-50 dark:bg-gray-900 border-r dark:border-gray-700 min-h-screen`}>
        {!isMobile && (
          <div className="p-4 border-b dark:border-gray-700">
            <div className="flex items-center">
              <Package className="w-8 h-8 text-green-600 mr-3" />
              <div>
                <h1 className="text-lg font-bold text-gray-900 dark:text-white">Almoxarifado Jardim</h1>
                <p className="text-xs text-gray-900 dark:text-white">Sistema de Gestão</p>
              </div>
            </div>
          </div>
        )}

        <div className={`py-4 px-2 ${isMobile ? 'mt-4' : ''}`}>
          <div className="space-y-1">
            {abas.filter(aba => aba.permissao()).map((aba) => (
              <button
                key={aba.id}
                onClick={() => setAbaAtiva(aba.id)}
                className={`w-full flex items-center space-x-2 px-3 ${isMobile ? 'py-3' : 'py-2'} rounded-lg font-medium text-sm transition-colors ${
                  abaAtiva === aba.id
                    ? 'bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-white'
                    : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-white'
                }`}
              >
                <aba.icone className={`${isMobile ? 'w-5 h-5' : 'w-4 h-4'} flex-shrink-0`} />
                <span>{aba.nome}</span>
              </button>
            ))}

            {podeVerUsuarios && (
              <button
                onClick={() => setAbaAtiva('usuarios')}
                className={`w-full flex items-center space-x-2 px-3 ${isMobile ? 'py-3' : 'py-2'} rounded-lg font-medium text-sm transition-colors ${
                  abaAtiva === 'usuarios'
                    ? 'bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-white'
                    : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-white'
                }`}
              >
                <UserCog className={`${isMobile ? 'w-5 h-5' : 'w-4 h-4'} flex-shrink-0`} />
                <span>Usuários do Sistema</span>
              </button>
            )}
          </div>
        </div>

        <div className={`${isMobile ? 'fixed' : 'absolute'} bottom-0 left-0 right-0 p-4 border-t dark:border-gray-700 bg-gray-50 dark:bg-gray-900`}>
          <div className="flex items-center space-x-3 mb-3">
            <div className="w-10 h-10 rounded-full overflow-hidden flex-shrink-0 bg-gray-200 dark:bg-gray-700">
              {usuario?.photoURL ? (
                <img src={usuario.photoURL} alt="Profile" className="w-full h-full object-cover" />
              ) : (
                <User className="w-full h-full p-2 text-gray-600 dark:text-gray-400" />
              )}
            </div>
            <div className="flex-1 min-w-0">
              <p className={`${isMobile ? 'text-base' : 'text-sm'} font-medium text-gray-900 dark:text-white truncate`}>
                {usuario?.nome}
              </p>
              <p className="text-xs text-gray-900 dark:text-white truncate">
                {NIVEIS_LABELS[usuario?.nivel]}
              </p>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowProfileModal(true)}
                className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                title="Editar perfil"
              >
                <Edit className={`${isMobile ? 'w-5 h-5' : 'w-4 h-4'} text-gray-600 dark:text-gray-400`} />
              </button>
              <button
                onClick={toggleTheme}
                className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                title={theme === 'light' ? 'Mudar para modo escuro' : 'Mudar para modo claro'}
              >
                {theme === 'light' ? (
                  <Moon className={`${isMobile ? 'w-5 h-5' : 'w-4 h-4'} text-gray-600 dark:text-gray-400`} />
                ) : (
                  <Sun className={`${isMobile ? 'w-5 h-5' : 'w-4 h-4'} text-gray-600 dark:text-gray-400`} />
                )}
              </button>
            </div>
          </div>
          <button
            onClick={logout}
            className={`w-full flex items-center justify-center gap-2 px-3 ${
              isMobile ? 'py-3 text-base' : 'py-2 text-sm'
            } rounded-lg transition-colors text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/40`}
          >
            <Lock className={`${isMobile ? 'w-5 h-5' : 'w-4 h-4'}`} />
            <span>Sair</span>
          </button>
        </div>
      </nav>

      <UserProfileModal
        isOpen={showProfileModal}
        onClose={() => setShowProfileModal(false)}
        userId={usuario?.id}
      />

      <main className={`${isMobile ? 'pt-16' : 'pl-64'} w-full min-h-screen bg-gray-50 dark:bg-gray-900`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <div className="flex items-center justify-between mb-6">
              <h1 className={`${isMobile ? 'text-xl' : 'text-2xl'} font-semibold text-gray-900 dark:text-white`}>
                {abas.find(aba => aba.id === abaAtiva)?.nome || 'Dashboard'}
              </h1>
            </div>
            
            {abaAtiva === 'dashboard' && <Dashboard firebaseStatus={firebaseStatus} />}
            
            {abaAtiva === 'meu-inventario' && (
              <MeuInventarioTab
                emprestimos={emprestimos}
              />
            )}

            {abaAtiva === 'tarefas' && (
              <FuncionariosProvider>
                <TarefasProvider>
                  <TarefasTab />
                </TarefasProvider>
              </FuncionariosProvider>
            )}

            {abaAtiva === 'suporte' && (
              <SuporteTab />
            )}

            {abaAtiva === 'inventario' && (
              <InventarioTab
                inventario={inventario}
                emprestimos={emprestimos}
              />
            )}
            
            {abaAtiva === 'emprestimos' && (
              PermissionChecker.canView(usuario?.nivel) ? (
                <EmprestimosTab
                  emprestimos={emprestimos}
                  inventario={inventario}
                  funcionarios={funcionarios}
                  readonly={!PermissionChecker.canManageOperational(usuario?.nivel)}
                />
              ) : (
                <PermissionDenied message="Você não tem permissão para visualizar os empréstimos." />
              )
            )}
            
            {abaAtiva === 'funcionarios' && (
              PermissionChecker.canView(usuario?.nivel) ? (
                <FuncionariosTab
                  funcionarios={funcionarios}
                  readonly={!PermissionChecker.canManageEmployees(usuario?.nivel)}
                />
              ) : (
                <PermissionDenied message="Você não tem permissão para visualizar os funcionários." />
              )
            )}

            {abaAtiva === 'compras' && (
              PermissionChecker.canView(usuario?.nivel) ? (
                <ComprasTab
                  compras={compras}
                  inventario={inventario}
                  funcionarios={funcionarios}
                  readonly={!PermissionChecker.canManagePurchases(usuario?.nivel)}
                />
              ) : (
                <PermissionDenied message="Você não tem permissão para visualizar as compras." />
              )
            )}
            
            {abaAtiva === 'danificadas' && (
              PermissionChecker.canView(usuario?.nivel) ? (
                <FerramentasDanificadasTab
                  ferramentasDanificadas={ferramentasDanificadas}
                  inventario={inventario}
                />
              ) : (
                <PermissionDenied message="Você não tem permissão para visualizar as ferramentas danificadas." />
              )
            )}
            
            {abaAtiva === 'perdidas' && (
              PermissionChecker.canView(usuario?.nivel) ? (
                <FerramentasPerdidasTab
                  ferramentasPerdidas={ferramentasPerdidas}
                  inventario={inventario}
                />
              ) : (
                <PermissionDenied message="Você não tem permissão para visualizar as ferramentas perdidas." />
              )
            )}

            {abaAtiva === 'historico-emprestimos' && (
              PermissionChecker.canView(usuario?.nivel) ? (
                <HistoricoEmprestimosTab
                  emprestimos={emprestimos}
                  funcionarios={funcionarios}
                  inventario={inventario}
                />
              ) : (
                <PermissionDenied message="Você não tem permissão para visualizar o histórico de empréstimos." />
              )
            )}

            {abaAtiva === 'usuarios' && (
              PermissionChecker.canManageUsers(usuario?.nivel) ? (
                <UsuariosTab />
              ) : (
                <PermissionDenied message="Você não tem permissão para gerenciar usuários do sistema." />
              )
            )}

            {abaAtiva === 'historico-transferencias' && (
              usuario?.nivel >= NIVEIS_PERMISSAO.SUPERVISOR ? (
                <HistoricoTransferenciasTab />
              ) : (
                <PermissionDenied message="Você não tem permissão para visualizar o histórico de transferências." />
              )
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

// Componente App
const App = () => {
  const { usuario, isLoading } = useAuth();

  if (isLoading) {
    return <LoadingScreen />;
  }

  return usuario ? <Sistema /> : <LoginForm />;
};

// Componente principal
const AlmoxarifadoJardim = () => {
  useNotifications();
  
  return (
    <AuthProvider>
      <ThemeProvider>
        <ToastProvider>
          <App />
          <PWAUpdateAvailable />
        </ToastProvider>
      </ThemeProvider>
    </AuthProvider>
  );
};

export default AlmoxarifadoJardim;
