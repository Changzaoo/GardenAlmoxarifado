import React, { useState, useEffect } from 'react';
import { X, Eye, EyeOff } from 'lucide-react';
import { updateDoc, doc } from 'firebase/firestore';
import { db } from '../../firebaseConfig';
import { useAuth } from '../../hooks/useAuth';
import { useToast } from '../ToastProvider';
import { encryptPassword } from '../../utils/crypto';
import { NIVEIS_PERMISSAO, NIVEIS_LABELS } from '../../constants/permissoes';

const UserProfileModal = ({ isOpen, onClose, userId }) => {
  const { usuario, atualizarUsuario } = useAuth();
  const { showToast } = useToast();
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const canEdit = usuario?.id === userId;
  
  const [userData, setUserData] = useState({
    nome: usuario?.nome || '',
    email: usuario?.email || '',
    senha: '',
    telefone: usuario?.telefone || '',
    nivel: usuario?.nivel || NIVEIS_PERMISSAO.FUNCIONARIO,
    ativo: usuario?.ativo ?? true
  });

  useEffect(() => {
    if (isOpen && usuario) {
      setUserData({
        nome: usuario.nome || '',
        email: usuario.email || '',
        senha: '',
        telefone: usuario.telefone || '',
        nivel: usuario.nivel || NIVEIS_PERMISSAO.FUNCIONARIO,
        ativo: usuario.ativo ?? true
      });
    }
  }, [isOpen, usuario]);

  const handleSave = async () => {
    try {
      if (!canEdit) {
        showToast('Você só pode editar seu próprio perfil', 'error');
        return;
      }

      setLoading(true);

      // Validações básicas
      if (!userData.nome?.trim()) {
        showToast('O nome é obrigatório', 'error');
        setLoading(false);
        return;
      }

      // Prepara os dados para atualização
      const dadosParaAtualizar = {
        nome: userData.nome.trim(),
        ativo: userData.ativo
      };

      // Adiciona senha apenas se foi fornecida, e encripta antes de salvar
      if (userData.senha?.trim()) {
        const senhaCriptografada = encryptPassword(userData.senha.trim());
        dadosParaAtualizar.senha = senhaCriptografada.hash;
        dadosParaAtualizar.senhaSalt = senhaCriptografada.salt;
        dadosParaAtualizar.senhaVersion = senhaCriptografada.version;
      }

      // Atualiza no Firestore
      await updateDoc(doc(db, 'usuarios', usuario.id), dadosParaAtualizar);
      
      // Atualiza o estado local
      atualizarUsuario({
        ...usuario,
        ...dadosParaAtualizar
      });
      
      showToast('Perfil atualizado com sucesso!', 'success');
      onClose();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      showToast('Erro ao atualizar perfil: ' + (error.message || 'Tente novamente'), 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

const UserProfileModal = ({ isOpen, onClose, userId }) => {
  const { usuario, atualizarUsuario } = useAuth();
  const { showToast } = useToast();
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const canEdit = usuario?.id === userId;
  
  const [userData, setUserData] = useState({
    nome: usuario?.nome || '',
    email: usuario?.email || '',
    senha: '',
    telefone: usuario?.telefone || ''
  });

  useEffect(() => {
    if (isOpen && usuario) {
      setUserData({
        nome: usuario.nome || '',
        email: usuario.email || '',
        senha: '',
        telefone: usuario.telefone || ''
      });
      setPreview(null);
    }
  }, [isOpen, usuario]);

  const handleFileUpload = async (file) => {
    try {
      setLoading(true);
      const storageRef = ref(storage, `users/${usuario.id}/profile-${Date.now()}`);
      const snapshot = await uploadBytes(storageRef, file);
      const downloadURL = await getDownloadURL(snapshot.ref);
      
      await updateDoc(doc(db, 'usuarios', usuario.id), {
        photoURL: downloadURL
      });
      
      atualizarUsuario({ photoURL: downloadURL });
      showToast('Foto atualizada com sucesso!', 'success');
    } catch (error) {
      console.error('Erro ao fazer upload:', error);
      showToast('Erro ao atualizar foto', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    try {
      if (!canEdit) {
        showToast('Você só pode editar seu próprio perfil', 'error');
        return;
      }

      setLoading(true);

      // Validações básicas
      if (!userData.nome?.trim()) {
        showToast('O nome é obrigatório', 'error');
        setLoading(false);
        return;
      }

      if (!userData.email?.trim()) {
        showToast('O usuário é obrigatório', 'error');
        setLoading(false);
        return;
      }

      // Prepara os dados para atualização
      const dadosParaAtualizar = {
        nome: userData.nome.trim(),
        email: userData.email.trim(),
        telefone: userData.telefone?.trim() || ''
      };

      // Adiciona senha apenas se foi fornecida, e encripta antes de salvar
      if (userData.senha?.trim()) {
        const senhaCriptografada = encryptPassword(userData.senha.trim());
        dadosParaAtualizar.senha = senhaCriptografada.hash;
        dadosParaAtualizar.senhaSalt = senhaCriptografada.salt;
        dadosParaAtualizar.senhaVersion = senhaCriptografada.version;
      }

      // Atualiza no Firestore
      await updateDoc(doc(db, 'usuarios', usuario.id), dadosParaAtualizar);
      
      // Atualiza o estado local
      atualizarUsuario({
        ...usuario,
        ...dadosParaAtualizar
      });
      
      showToast('Perfil atualizado com sucesso!', 'success');
      onClose();
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      showToast('Erro ao atualizar perfil: ' + (error.message || 'Tente novamente'), 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-[#192734] border border-[#38444D] rounded-xl shadow-lg max-w-lg w-full mx-4">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-medium text-[#FFFFFF]">
              {usuario?.id === userId ? 'Editar Perfil' : 'Visualizar Perfil'}
            </h3>
            <button
              onClick={onClose}
              className="p-2 hover:bg-[#1D9BF0] hover:bg-opacity-10 rounded-full transition-colors"
            >
              <X className="w-6 h-6 text-[#1D9BF0]" />
            </button>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-[#FFFFFF] mb-2">
                Nome Completo *
              </label>
              <input
                type="text"
                className="w-full px-3 py-2 bg-[#253341] text-white border border-[#38444D] rounded-lg focus:ring-2 focus:ring-[#1D9BF0] focus:border-transparent"
                placeholder="Digite o nome completo"
                value={userData.nome || ''}
                onChange={(e) => setUserData(prev => ({ ...prev, nome: e.target.value }))}
                disabled={!canEdit}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-[#FFFFFF] mb-2">
                Email/Usuário *
              </label>
              <input
                type="text"
                className="w-full px-3 py-2 bg-[#253341] text-white border border-[#38444D] rounded-lg focus:ring-2 focus:ring-[#1D9BF0] focus:border-transparent opacity-60"
                value={userData.email || ''}
                disabled={true}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-[#FFFFFF] mb-2">
                Senha {canEdit ? '(deixe vazio para manter a atual)' : ''}
              </label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  className="w-full px-3 py-2 pr-10 bg-[#253341] text-white border border-[#38444D] rounded-lg focus:ring-2 focus:ring-[#1D9BF0] focus:border-transparent"
                  placeholder={canEdit ? "Nova senha" : ""}
                  value={userData.senha || ''}
                  onChange={(e) => setUserData(prev => ({ ...prev, senha: e.target.value }))}
                  disabled={!canEdit}
                />
                {canEdit && (
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-2 p-1 hover:bg-[#1D9BF0] hover:bg-opacity-10 rounded-full transition-colors"
                  >
                    {showPassword ? 
                      <EyeOff className="w-5 h-5 text-[#1D9BF0]" /> : 
                      <Eye className="w-5 h-5 text-[#1D9BF0]" />
                    }
                  </button>
                )}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-[#FFFFFF] mb-2">
                Nível de Acesso *
              </label>
              <select
                className="w-full px-3 py-2 bg-[#253341] text-white border border-[#38444D] rounded-lg focus:ring-2 focus:ring-[#1D9BF0] focus:border-transparent"
                value={userData.nivel || NIVEIS_PERMISSAO.FUNCIONARIO}
                onChange={(e) => setUserData(prev => ({ ...prev, nivel: parseInt(e.target.value) }))}
                disabled={true}
              >
                {Object.entries(NIVEIS_LABELS).map(([value, label]) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>
              <p className="text-xs text-[#8899A6] mt-1">
                {userData.nivel === NIVEIS_PERMISSAO.FUNCIONARIO && "Apenas visualizar informações"}
                {userData.nivel === NIVEIS_PERMISSAO.SUPERVISOR && "Criar funcionários + operações"}
                {userData.nivel === NIVEIS_PERMISSAO.GERENTE_SETOR && "Gerenciar setor específico"}
                {userData.nivel === NIVEIS_PERMISSAO.GERENTE_GERAL && "Gerenciar múltiplos setores"}
                {userData.nivel === NIVEIS_PERMISSAO.ADMIN && "Todas as permissões"}
              </p>
            </div>

            <div className="flex items-center">
              <input
                type="checkbox"
                id="ativo"
                className="h-4 w-4 text-[#1D9BF0] focus:ring-[#1D9BF0] border-[#1D9BF0] rounded"
                checked={userData.ativo}
                onChange={(e) => setUserData(prev => ({ ...prev, ativo: e.target.checked }))}
                disabled={!canEdit}
              />
              <label htmlFor="ativo" className="ml-2 text-sm text-[#FFFFFF]">
                Usuário ativo
              </label>
            </div>
          </div>

          <div className="flex justify-end space-x-3 mt-6 pt-4 border-t border-[#2F3336]">
            <button
              onClick={onClose}
              className="px-4 py-2 bg-black bg-opacity-5 dark:bg-opacity-20 text-[#FFFFFF] rounded-full hover:bg-opacity-10 dark:hover:bg-opacity-30 transition-colors disabled:opacity-50"
            >
              Cancelar
            </button>
            {canEdit && (
              <button
                onClick={handleSave}
                disabled={loading}
                className="px-4 py-2 bg-[#1D9BF0] text-white rounded-full hover:bg-[#1A8CD8] transition-colors disabled:opacity-50"
              >
                {loading ? "Salvando..." : "Atualizar"}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>

            <div className="space-y-4">
              <Input
                label="Nome"
                value={userData.nome || ''}
                onChange={(e) => setUserData(prev => ({ ...prev, nome: e.target.value }))}
                disabled={!canEdit}
              />

              <Input
                label="Usuário"
                value={userData.email || ''}
                disabled={true}
                className="opacity-60"
              />

              <Input
                label="Senha"
                type="password"
                value={userData.senha || ''}
                onChange={(e) => setUserData(prev => ({ ...prev, senha: e.target.value }))}
                placeholder={canEdit ? "Digite a nova senha" : ""}
                disabled={!canEdit}
              />

              <Input
                label="Telefone"
                type="tel"
                value={userData.telefone || ''}
                onChange={(e) => setUserData(prev => ({ ...prev, telefone: e.target.value }))}
                disabled={!canEdit}
              />

            </div>
          </div>
          
          {canEdit && (
            <div className="flex justify-end mt-6">
              <Button variant="primary" onClick={handleSave} loading={loading} icon={Save}>
                Salvar
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default UserProfileModal;
