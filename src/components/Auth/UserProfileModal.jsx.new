import React, { useState, useRef, useEffect } from 'react';
import { User, Upload, Save } from 'lucide-react';
import { storage } from '../../firebaseConfig';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { updateDoc, doc } from 'firebase/firestore';
import { db } from '../../firebaseConfig';
import { useAuth } from '../../hooks/useAuth';
import { useToast } from '../ToastProvider';
import { encryptData } from '../../utils/crypto';
import Button from '../common/Button';
import Input from '../common/Input';

const UserProfileModal = ({ isOpen, onClose, userId }) => {
  const { usuario, atualizarUsuario } = useAuth();
  const { showToast } = useToast();
  const [loading, setLoading] = useState(false);
  const [preview, setPreview] = useState(null);
  const fileInputRef = useRef();
  const canEdit = usuario?.id === userId;
  
  const [userData, setUserData] = useState({
    nome: usuario?.nome || '',
    email: usuario?.email || '',
    senha: '',
    telefone: usuario?.telefone || ''
  });

  useEffect(() => {
    if (isOpen && usuario) {
      setUserData({
        nome: usuario.nome || '',
        email: usuario.email || '',
        senha: '',
        telefone: usuario.telefone || ''
      });
      setPreview(null);
    }
  }, [isOpen, usuario]);

  const handleFileUpload = async (file) => {
    try {
      setLoading(true);
      const storageRef = ref(storage, `users/${usuario.id}/profile-${Date.now()}`);
      const snapshot = await uploadBytes(storageRef, file);
      const downloadURL = await getDownloadURL(snapshot.ref);
      
      await updateDoc(doc(db, 'usuarios', usuario.id), {
        photoURL: downloadURL
      });
      
      atualizarUsuario({ photoURL: downloadURL });
      showToast('Foto atualizada com sucesso!', 'success');
    } catch (error) {
      console.error('Erro ao fazer upload:', error);
      showToast('Erro ao atualizar foto', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    try {
      setLoading(true);
      const updatedData = {
        ...userData,
        email: `${userData.email.replace(/@.*$/, '')}@almoxarifado.com`
      };

      // Only include password in update if it was changed
      if (!userData.senha) {
        delete updatedData.senha;
      }
      
      const encryptedData = encryptData(updatedData);
      await updateDoc(doc(db, 'usuarios', usuario.id), encryptedData);
      
      atualizarUsuario(updatedData);
      showToast('Perfil atualizado com sucesso!', 'success');
    } catch (error) {
      console.error('Erro ao atualizar:', error);
      showToast('Erro ao atualizar perfil', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-[#192734] border border-[#38444D] rounded-xl shadow-lg max-w-lg w-full mx-4 relative">
        <button 
          onClick={onClose}
          className="absolute right-4 top-4 p-1 hover:bg-[#253341] rounded-full transition-colors"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-[#8899A6]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        
        <div className="p-6">
          <h2 className="text-xl font-semibold text-white mb-6">Perfil do Usu치rio</h2>

          <div className="space-y-6">
            <div className="flex flex-col items-center">
              <div className="relative mb-4">
                {preview ? (
                  <img
                    src={preview}
                    alt="Preview"
                    className="w-32 h-32 rounded-full object-cover border-4 border-[#1DA1F2]"
                  />
                ) : usuario?.photoURL ? (
                  <img
                    src={usuario.photoURL}
                    alt="Profile"
                    className="w-32 h-32 rounded-full object-cover border-4 border-[#1DA1F2]"
                  />
                ) : (
                  <div className="w-32 h-32 rounded-full bg-[#253341] flex items-center justify-center border-4 border-[#1DA1F2]">
                    <User size={48} className="text-[#8899A6]" />
                  </div>
                )}

                {canEdit && (
                  <div className="absolute -bottom-2 right-0 flex space-x-2">
                    <button
                      onClick={() => fileInputRef.current.click()}
                      className="p-2 rounded-full bg-[#1DA1F2] text-white hover:bg-[#1a91da] transition-colors"
                      title="Upload foto"
                    >
                      <Upload size={16} />
                    </button>
                  </div>
                )}
              </div>
            </div>

            <input
              type="file"
              accept="image/*"
              ref={fileInputRef}
              className="hidden"
              onChange={(e) => {
                const file = e.target.files[0];
                if (file) {
                  if (file.size > 5 * 1024 * 1024) {
                    showToast('A foto deve ter no m치ximo 5MB', 'error');
                    return;
                  }
                  if (!file.type.startsWith('image/')) {
                    showToast('Por favor, selecione uma imagem v치lida', 'error');
                    return;
                  }
                  setPreview(URL.createObjectURL(file));
                  handleFileUpload(file);
                }
              }}
            />

            <div className="space-y-4">
              <Input
                label="Nome"
                value={userData.nome}
                onChange={(e) => setUserData(prev => ({ ...prev, nome: e.target.value }))}
                disabled={!canEdit}
              />

              <Input
                label="Usu치rio"
                value={userData.email?.replace(/@.*$/, '') || ''}
                onChange={(e) => setUserData(prev => ({ ...prev, email: e.target.value }))}
                disabled={!canEdit}
              />

              <Input
                label="Senha"
                type="password"
                value={userData.senha || ''}
                onChange={(e) => setUserData(prev => ({ ...prev, senha: e.target.value }))}
                disabled={!canEdit}
                placeholder={canEdit ? "Digite a nova senha" : ""}
              />

              <Input
                label="Telefone"
                type="tel"
                value={userData.telefone}
                onChange={(e) => setUserData(prev => ({ ...prev, telefone: e.target.value }))}
                disabled={!canEdit}
              />

              {canEdit && (
                <div className="flex justify-end mt-6">
                  <Button variant="primary" onClick={handleSave} loading={loading} icon={Save}>
                    Salvar
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserProfileModal;
