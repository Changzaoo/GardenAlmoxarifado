import { getMessaging, getToken, onMessage } from 'firebase/messaging';
import { doc, setDoc, getDoc, updateDoc, arrayUnion, serverTimestamp } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { toast } from 'react-toastify';

/**
 * NotificationManager - Sistema avan√ßado de notifica√ß√µes push
 * Features:
 * - Notifica√ß√µes web push (FCM)
 * - Notifica√ß√µes nativas mobile (Capacitor)
 * - Sistema de badges e contadores
 * - Gerenciamento de permiss√µes
 * - Fila de notifica√ß√µes pendentes
 * - Sincroniza√ß√£o multi-dispositivo
 * - Sons e vibra√ß√µes customiz√°veis
 */

class NotificationManager {
  constructor() {
    this.messaging = null;
    this.currentUserId = null;
    this.initialized = false;
    this.notificationQueue = [];
    this.sounds = {
      message: null,
      mention: null,
      call: null
    };
    this.preferences = {
      enabled: true,
      sound: true,
      vibration: true,
      desktop: true,
      mobile: true,
      showPreview: true,
      playOnFocus: false
    };
    
    this.loadSounds();
    this.loadPreferences();
    this.setupVisibilityListener();
  }

  // ==================== INICIALIZA√á√ÉO ====================

  /**
   * Inicializa o gerenciador de notifica√ß√µes
   */
  async initialize(userId) {
    if (this.initialized && this.currentUserId === userId) {

      return { success: true, message: 'J√° inicializado' };
    }

    this.currentUserId = userId;

    try {
      // Verificar suporte a notifica√ß√µes
      if (!('Notification' in window)) {
        throw new Error('Navegador n√£o suporta notifica√ß√µes');
      }

      // Verificar permiss√£o
      const permission = await this.requestPermission();
      
      if (permission !== 'granted') {
        return { 
          success: false, 
          message: 'Permiss√£o negada',
          permission 
        };
      }

      // Inicializar Firebase Cloud Messaging
      await this.initializeFirebaseMessaging(userId);

      // Registrar service worker se necess√°rio
      await this.registerServiceWorker();

      // Carregar notifica√ß√µes pendentes
      await this.loadPendingNotifications();

      this.initialized = true;

      return { 
        success: true, 
        message: 'Notifica√ß√µes ativadas',
        permission: 'granted'
      };

    } catch (error) {
      console.error('‚ùå Erro ao inicializar NotificationManager:', error);
      return { 
        success: false, 
        message: error.message,
        error 
      };
    }
  }

  /**
   * Solicita permiss√£o para notifica√ß√µes
   */
  async requestPermission() {
    if (Notification.permission === 'granted') {
      return 'granted';
    }

    if (Notification.permission === 'denied') {
      toast.warn('Notifica√ß√µes bloqueadas. Ative nas configura√ß√µes do navegador.', {
        autoClose: 5000
      });
      return 'denied';
    }

    // Solicitar permiss√£o
    const permission = await Notification.requestPermission();
    
    if (permission === 'granted') {
      toast.success('Notifica√ß√µes ativadas! üîî', { icon: '‚úÖ' });
    } else {
      toast.info('Notifica√ß√µes desativadas', { icon: '‚ÑπÔ∏è' });
    }

    return permission;
  }

  /**
   * Inicializa Firebase Cloud Messaging
   */
  async initializeFirebaseMessaging(userId) {
    try {
      // Verificar se est√° rodando em Capacitor (Android/iOS)
      const isCapacitor = await this.isCapacitorPlatform();
      
      if (isCapacitor) {

        await this.setupCapacitorNotifications(userId);
        return;
      }

      // Web: usar Firebase Cloud Messaging

      const { default: app } = await import('../firebaseConfig');
      this.messaging = getMessaging(app);

      // Obter VAPID key
      const vapidKey = process.env.REACT_APP_FIREBASE_VAPID_KEY;
      
      if (!vapidKey) {

        this.setupLocalMode();
        return;
      }

      // Obter token FCM
      const token = await getToken(this.messaging, { vapidKey });
      
      if (token) {
        await this.saveToken(userId, token);

      }

      // Listener de mensagens em primeiro plano
      onMessage(this.messaging, (payload) => {

        this.handleFCMMessage(payload);
      });

    } catch (error) {
      console.error('‚ùå Erro ao inicializar FCM:', error);
      this.setupLocalMode();
    }
  }

  /**
   * Verifica se est√° rodando em plataforma Capacitor
   */
  async isCapacitorPlatform() {
    try {
      const { Capacitor } = await import('@capacitor/core');
      return Capacitor.isNativePlatform();
    } catch {
      return false;
    }
  }

  /**
   * Configura notifica√ß√µes no Capacitor (Android/iOS)
   */
  async setupCapacitorNotifications(userId) {
    try {
      const { PushNotifications } = await import('@capacitor/push-notifications');
      const { Capacitor } = await import('@capacitor/core');

      // Solicitar permiss√£o
      let permStatus = await PushNotifications.checkPermissions();

      if (permStatus.receive === 'prompt') {
        permStatus = await PushNotifications.requestPermissions();
      }

      if (permStatus.receive !== 'granted') {

        return;
      }

      // Registrar para receber notifica√ß√µes
      await PushNotifications.register();

      // Listener: token FCM recebido
      await PushNotifications.addListener('registration', async (token) => {

        await this.saveToken(userId, token.value);
      });

      // Listener: erro no registro
      await PushNotifications.addListener('registrationError', (error) => {
        console.error('‚ùå Erro ao registrar push:', error);
      });

      // Listener: notifica√ß√£o recebida (app em primeiro plano)
      await PushNotifications.addListener('pushNotificationReceived', (notification) => {

        this.handleCapacitorNotification(notification);
      });

      // Listener: notifica√ß√£o clicada
      await PushNotifications.addListener('pushNotificationActionPerformed', (notification) => {

        const conversaId = notification.notification?.data?.conversaId;
        this.handleNotificationClick(conversaId);
      });

    } catch (error) {
      console.error('‚ùå Erro ao configurar Capacitor notifications:', error);
    }
  }

  /**
   * Processa notifica√ß√£o recebida pelo Capacitor
   */
  handleCapacitorNotification(notification) {
    const { title, body, data } = notification;
    
    // Se o app est√° aberto e na p√°gina de mensagens, apenas mostrar toast
    if (this.isOnMessagesPage() && this.isWindowActive()) {
      toast.info(body || 'Nova mensagem', {
        icon: 'üí¨',
        autoClose: 3000
      });
      
      if (this.preferences.sound) {
        this.playSound('message');
      }
      
      return;
    }

    // App em background ou outra p√°gina - notifica√ß√£o j√° foi mostrada pelo sistema

  }

  /**
   * Registra service worker
   */
  async registerServiceWorker() {
    if ('serviceWorker' in navigator) {
      try {
        const registration = await navigator.serviceWorker.register('/service-worker.js');

        // Configurar comunica√ß√£o com SW
        this.setupServiceWorkerCommunication(registration);
        
        return registration;
      } catch (error) {
        console.error('‚ùå Erro ao registrar Service Worker:', error);
      }
    }
  }

  /**
   * Configura comunica√ß√£o com service worker
   */
  setupServiceWorkerCommunication(registration) {
    // Listener de mensagens do SW
    navigator.serviceWorker.addEventListener('message', (event) => {

      if (event.data.type === 'NOTIFICATION_CLICKED') {
        this.handleNotificationClick(event.data.conversaId);
      }
    });

    // Enviar configura√ß√µes para o SW
    this.sendMessageToSW({
      type: 'UPDATE_CONFIG',
      preferences: this.preferences
    });
  }

  /**
   * Envia mensagem para o service worker
   */
  sendMessageToSW(message) {
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage(message);
    }
  }

  // ==================== GERENCIAMENTO DE NOTIFICA√á√ïES ====================

  /**
   * Processa mensagem FCM recebida
   */
  handleFCMMessage(payload) {
    const notification = payload.notification || {};
    const data = payload.data || {};

    // Verificar se est√° na p√°gina de mensagens e aba ativa
    if (this.isOnMessagesPage() && this.isWindowActive()) {

      // Apenas tocar som se configurado
      if (this.preferences.sound && this.preferences.playOnFocus) {
        this.playSound('message');
      }
      
      // Mostrar toast discreto
      toast.info(notification.body || 'Nova mensagem', {
        icon: 'üí¨',
        autoClose: 3000,
        position: 'bottom-right'
      });
      
      return;
    }

    // Mostrar notifica√ß√£o completa
    this.showNotification({
      title: notification.title || 'Nova Mensagem',
      body: notification.body || 'Voc√™ recebeu uma mensagem',
      icon: notification.icon || '/logo192.png',
      conversaId: data.conversaId,
      senderId: data.senderId,
      senderName: data.senderName
    });
  }

  /**
   * Mostra uma notifica√ß√£o
   */
  async showNotification(options) {
    const {
      title,
      body,
      icon = '/logo192.png',
      conversaId = null,
      senderId = null,
      senderName = null
    } = options;

    // Verificar prefer√™ncias
    if (!this.preferences.enabled || !this.preferences.desktop) {

      return;
    }

    // Verificar permiss√£o
    if (Notification.permission !== 'granted') {

      return;
    }

    try {
      // Criar notifica√ß√£o do navegador
      const notification = new Notification(title, {
        body: this.preferences.showPreview ? body : 'Nova mensagem',
        icon,
        badge: '/logo192.png',
        tag: conversaId ? `msg-${conversaId}` : `msg-${Date.now()}`,
        data: {
          conversaId,
          senderId,
          senderName,
          url: conversaId ? `/#/mensagens?conversa=${conversaId}` : '/#/mensagens'
        },
        requireInteraction: false,
        vibrate: this.preferences.vibration ? [200, 100, 200] : [],
        silent: !this.preferences.sound
      });

      // Handler de clique
      notification.onclick = () => {
        window.focus();
        this.handleNotificationClick(conversaId);
        notification.close();
      };

      // Auto-fechar ap√≥s 10 segundos
      setTimeout(() => notification.close(), 10000);

      // Tocar som
      if (this.preferences.sound) {
        this.playSound('message');
      }

      // Adicionar √† fila
      this.notificationQueue.push({
        id: Date.now(),
        title,
        body,
        conversaId,
        timestamp: new Date().toISOString()
      });

      // Limitar fila a 50 itens
      if (this.notificationQueue.length > 50) {
        this.notificationQueue = this.notificationQueue.slice(-50);
      }

      // Atualizar badge
      this.updateBadge(1);

    } catch (error) {
      console.error('‚ùå Erro ao mostrar notifica√ß√£o:', error);
      
      // Fallback: toast
      toast.info(body, {
        icon: 'üí¨',
        autoClose: 5000
      });
    }
  }

  /**
   * Atualiza contador de badge
   */
  updateBadge(increment = 0) {
    if ('setAppBadge' in navigator) {
      // Obter contagem atual de n√£o lidas
      const currentCount = this.getCurrentUnreadCount();
      const newCount = currentCount + increment;
      
      navigator.setAppBadge(newCount).catch(err => {

      });

      // Atualizar SW tamb√©m
      this.sendMessageToSW({
        type: 'UPDATE_BADGE',
        count: newCount
      });
    }
  }

  /**
   * Limpa badge
   */
  clearBadge() {
    if ('clearAppBadge' in navigator) {
      navigator.clearAppBadge().catch(() => {});
    }
    
    this.sendMessageToSW({ type: 'CLEAR_BADGE' });
  }

  /**
   * Obt√©m contagem de n√£o lidas (implementar conforme seu sistema)
   */
  getCurrentUnreadCount() {
    // Isso deve ser integrado com seu sistema de contagem
    // Por enquanto, retorna o tamanho da fila
    return this.notificationQueue.length;
  }

  // ==================== SONS E FEEDBACK ====================

  /**
   * Carrega sons de notifica√ß√£o
   */
  loadSounds() {
    try {
      this.sounds.message = new Audio('/sounds/notification.mp3');
      this.sounds.message.volume = 0.5;
      
      this.sounds.mention = new Audio('/sounds/mention.mp3');
      this.sounds.mention.volume = 0.6;
      
      this.sounds.call = new Audio('/sounds/call.mp3');
      this.sounds.call.volume = 0.7;
    } catch (error) {

    }
  }

  /**
   * Toca um som
   */
  playSound(type = 'message') {
    if (!this.preferences.sound) return;
    
    const sound = this.sounds[type];
    if (sound) {
      sound.currentTime = 0;
      sound.play().catch(err => {

      });
    }
  }

  // ==================== PREFER√äNCIAS ====================

  /**
   * Carrega prefer√™ncias do localStorage
   */
  loadPreferences() {
    try {
      const saved = localStorage.getItem('notification_preferences');
      if (saved) {
        this.preferences = { ...this.preferences, ...JSON.parse(saved) };
      }
    } catch (error) {
      console.error('Erro ao carregar prefer√™ncias:', error);
    }
  }

  /**
   * Salva prefer√™ncias
   */
  savePreferences(newPreferences) {
    this.preferences = { ...this.preferences, ...newPreferences };
    localStorage.setItem('notification_preferences', JSON.stringify(this.preferences));
    
    // Atualizar SW
    this.sendMessageToSW({
      type: 'UPDATE_CONFIG',
      preferences: this.preferences
    });
  }

  /**
   * Obt√©m prefer√™ncias atuais
   */
  getPreferences() {
    return { ...this.preferences };
  }

  // ==================== HELPERS ====================

  /**
   * Verifica se est√° na p√°gina de mensagens
   */
  isOnMessagesPage() {
    return window.location.hash.includes('#/mensagens') ||
           window.location.pathname.includes('/mensagens');
  }

  /**
   * Verifica se a janela est√° ativa
   */
  isWindowActive() {
    return document.hasFocus() && !document.hidden;
  }

  /**
   * Configura listener de visibilidade
   */
  setupVisibilityListener() {
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'visible' && this.isOnMessagesPage()) {
        // Limpar badge quando voltar para a p√°gina
        this.clearBadge();
      }
    });
  }

  /**
   * Handler de clique em notifica√ß√£o
   */
  handleNotificationClick(conversaId) {
    if (conversaId) {
      window.location.hash = `#/mensagens?conversa=${conversaId}`;
    } else {
      window.location.hash = '#/mensagens';
    }
    
    // Limpar badge
    this.clearBadge();
  }

  /**
   * Modo local (desenvolvimento)
   */
  setupLocalMode() {

  }

  /**
   * Salva token FCM no Firestore
   */
  async saveToken(userId, token) {
    try {
      const userRef = doc(db, 'usuarios', userId);
      const tokenData = {
        token,
        platform: 'web',
        browser: navigator.userAgent,
        registeredAt: serverTimestamp(),
        lastUsed: serverTimestamp()
      };

      await setDoc(userRef, {
        fcmTokens: arrayUnion(tokenData),
        notificationPreferences: this.preferences
      }, { merge: true });

    } catch (error) {
      console.error('‚ùå Erro ao salvar token:', error);
    }
  }

  /**
   * Carrega notifica√ß√µes pendentes
   */
  async loadPendingNotifications() {
    // Obter do service worker
    if (navigator.serviceWorker.controller) {
      const channel = new MessageChannel();
      
      channel.port1.onmessage = (event) => {
        if (event.data.notifications) {
          this.notificationQueue = event.data.notifications;

        }
      };

      navigator.serviceWorker.controller.postMessage(
        { type: 'GET_PENDING_NOTIFICATIONS' },
        [channel.port2]
      );
    }
  }

  /**
   * Envia notifica√ß√£o de teste
   */
  async sendTestNotification() {
    await this.showNotification({
      title: 'Teste de Notifica√ß√£o üß™',
      body: 'Sistema de notifica√ß√µes funcionando perfeitamente!',
      icon: '/logo192.png'
    });
    
    toast.success('Notifica√ß√£o de teste enviada!', { icon: '‚úÖ' });
  }

  /**
   * Cleanup
   */
  cleanup() {
    this.initialized = false;
    this.currentUserId = null;
    this.notificationQueue = [];
    this.clearBadge();
  }
}

// Exportar inst√¢ncia singleton
const notificationManager = new NotificationManager();
export default notificationManager;
