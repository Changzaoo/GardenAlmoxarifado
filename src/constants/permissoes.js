// üîê Sistema de N√≠veis de Permiss√£o REVERSIVO (0 = M√°xima Permiss√£o)
export const NIVEIS_PERMISSAO = {
  ADMIN: 0,           // Acesso total ao sistema (M√ÅXIMA PERMISS√ÉO)
  FUNCIONARIO: 1,     // Acesso b√°sico
  SUPERVISOR: 2,      // Supervisiona um setor
  GERENTE_SETOR: 3,   // Gerencia um setor
  GERENTE_GERAL: 4,   // Gerencia m√∫ltiplos setores
  RH: 5,              // Recursos Humanos
  CEO: 6              // Diretor Executivo
};

export const NIVEIS_LABELS = {
  [NIVEIS_PERMISSAO.ADMIN]: 'Administrador',
  [NIVEIS_PERMISSAO.FUNCIONARIO]: 'Funcion√°rio',
  [NIVEIS_PERMISSAO.SUPERVISOR]: 'Supervisor',
  [NIVEIS_PERMISSAO.GERENTE_SETOR]: 'Gerente de Setor',
  [NIVEIS_PERMISSAO.GERENTE_GERAL]: 'Gerente Geral',
  [NIVEIS_PERMISSAO.RH]: 'RH',
  [NIVEIS_PERMISSAO.CEO]: 'CEO'
};

/**
 * Verifica√ß√£o especial para administrador - Acesso TOTAL
 * Admin (n√≠vel 0) sempre tem acesso a TUDO
 */
export const isAdminTotal = (nivel) => {
  return nivel === NIVEIS_PERMISSAO.ADMIN;
};

/**
 * Verifica√ß√£o de permiss√£o universal
 * Admin sempre passa, outros seguem l√≥gica reversiva
 */
export const temPermissaoUniversal = (nivelUsuario, nivelNecessario) => {
  // Admin (n√≠vel 0) sempre tem acesso total
  if (isAdminTotal(nivelUsuario)) {
    return true;
  }
  // Outros seguem l√≥gica reversiva (menor n√≠vel = maior permiss√£o)
  return nivelUsuario <= nivelNecessario;
};

export const NIVEIS_DESCRICAO = {
  [NIVEIS_PERMISSAO.ADMIN]: 'Acesso total ao sistema',
  [NIVEIS_PERMISSAO.FUNCIONARIO]: 'Acesso b√°sico √†s funcionalidades',
  [NIVEIS_PERMISSAO.SUPERVISOR]: 'Supervisiona equipe do setor',
  [NIVEIS_PERMISSAO.GERENTE_SETOR]: 'Gerencia um setor espec√≠fico',
  [NIVEIS_PERMISSAO.GERENTE_GERAL]: 'Gerencia m√∫ltiplos setores',
  [NIVEIS_PERMISSAO.RH]: 'Gest√£o de recursos humanos',
  [NIVEIS_PERMISSAO.CEO]: 'Diretor executivo - vis√£o estrat√©gica'
};

export const NIVEIS_ICONE = {
  [NIVEIS_PERMISSAO.ADMIN]: 'üëë',
  [NIVEIS_PERMISSAO.FUNCIONARIO]: 'üë§',
  [NIVEIS_PERMISSAO.SUPERVISOR]: 'üëî',
  [NIVEIS_PERMISSAO.GERENTE_SETOR]: 'üìä',
  [NIVEIS_PERMISSAO.GERENTE_GERAL]: 'üéØ',
  [NIVEIS_PERMISSAO.RH]: 'üíº',
  [NIVEIS_PERMISSAO.CEO]: 'üèÜ'
};

// üìÑ Configura√ß√£o de acesso √†s p√°ginas do menu
export const PERMISSOES_PAGINAS = {
  'meu-perfil': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // Todos
    descricao: 'Perfil do usu√°rio'
  },
  'ranking': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // Todos
    descricao: 'Ranking de pontua√ß√£o'
  },
  'notificacoes': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // Todos
    descricao: 'Notifica√ß√µes'
  },
  'relatorios-erro': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'Relat√≥rios de erro'
  },
  'mensagens': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // Todos
    descricao: 'Sistema de mensagens'
  },
  'tarefas': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // Todos
    descricao: 'Tarefas semanais'
  },
  'escala': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'Escala de trabalho'
  },
  'inventario': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'Invent√°rio'
  },
  'meu-inventario': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // Todos
    descricao: 'Meu invent√°rio'
  },
  'emprestimos': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'Empr√©stimos'
  },
  'funcionarios': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'Gest√£o de funcion√°rios'
  },
  'empresas-setores': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'Empresas & Setores'
  },
  'backup-monitoring': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'Backup & Monitoramento'
  },
  'password-reset-manager': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // ‚úÖ Todos (incluindo funcion√°rio)
    descricao: 'C√≥digos de Redefini√ß√£o'
  },
  'feed-social': {
    niveisPermitidos: [0, 1, 2, 3, 4, 5, 6], // Todos
    descricao: 'Feed Social'
  }
};

// Fun√ß√£o auxiliar para verificar se usu√°rio tem permiss√£o para acessar uma p√°gina
export const temPermissao = (nivelUsuario, paginaId) => {
  const pagina = PERMISSOES_PAGINAS[paginaId];
  if (!pagina) return false;
  return pagina.niveisPermitidos.includes(nivelUsuario);
};

// Fun√ß√£o para obter label do n√≠vel
export const getLabelNivel = (nivel) => {
  return NIVEIS_LABELS[nivel] || 'Desconhecido';
};

// Fun√ß√£o para obter √≠cone do n√≠vel
export const getIconeNivel = (nivel) => {
  return NIVEIS_ICONE[nivel] || '‚ùì';
};

// ==================== FUN√á√ïES AUXILIARES ====================

/**
 * Verifica se um n√≠vel √© Administrador
 * SEMPRE use esta fun√ß√£o ao inv√©s de comparar com 0 diretamente
 */
export const isAdmin = (nivel) => {
  return nivel === NIVEIS_PERMISSAO.ADMIN; // 0
};

/**
 * Verifica se um n√≠vel tem permiss√µes de alto n√≠vel
 * SISTEMA REVERSIVO: N√≠veis menores = Maior permiss√£o
 * Admin (0), Funcion√°rio (1), Supervisor (2) t√™m permiss√µes altas
 */
export const hasHighLevelPermission = (nivel) => {
  return nivel <= NIVEIS_PERMISSAO.SUPERVISOR; // 0, 1, 2
};

/**
 * Verifica se um n√≠vel tem permiss√µes de gerenciamento
 * SISTEMA REVERSIVO: N√≠veis menores = Maior permiss√£o
 * Admin (0), Funcion√°rio (1), Supervisor (2), Gerente Setor (3) t√™m permiss√µes de gerenciamento
 */
export const hasManagementPermission = (nivel) => {
  return nivel <= NIVEIS_PERMISSAO.GERENTE_SETOR; // 0, 1, 2, 3
};

/**
 * Verifica se um n√≠vel tem permiss√µes de supervis√£o
 * SISTEMA REVERSIVO: N√≠veis menores = Maior permiss√£o
 * Admin (0), Funcion√°rio (1), Supervisor (2) t√™m permiss√µes de supervis√£o
 */
export const hasSupervisionPermission = (nivel) => {
  return nivel <= NIVEIS_PERMISSAO.SUPERVISOR; // 0, 1, 2
};

/**
 * Verifica se um n√≠vel √© Funcion√°rio b√°sico
 */
export const isFuncionario = (nivel) => {
  return nivel === NIVEIS_PERMISSAO.FUNCIONARIO;
};/**
 * Compara n√≠veis de permiss√£o corretamente
 * Admin (0) √© o n√≠vel MAIS ALTO, CEO (6) √© o segundo mais alto
 * Retorna true se nivel1 tem permiss√£o maior ou igual a nivel2
 */
export const nivelMaiorOuIgual = (nivel1, nivel2) => {
  // Admin sempre tem maior permiss√£o
  if (nivel1 === NIVEIS_PERMISSAO.ADMIN) return true;
  if (nivel2 === NIVEIS_PERMISSAO.ADMIN) return false;
  
  // CEO e RH s√£o iguais em hierarquia, mas maiores que os demais
  const hierarchy = {
    [NIVEIS_PERMISSAO.ADMIN]: 7,        // 0 = maior permiss√£o
    [NIVEIS_PERMISSAO.CEO]: 6,          // 6
    [NIVEIS_PERMISSAO.RH]: 6,           // 5 (mesmo n√≠vel do CEO)
    [NIVEIS_PERMISSAO.GERENTE_GERAL]: 5, // 4
    [NIVEIS_PERMISSAO.GERENTE_SETOR]: 4, // 3
    [NIVEIS_PERMISSAO.SUPERVISOR]: 3,    // 2
    [NIVEIS_PERMISSAO.FUNCIONARIO]: 2    // 1
  };
  
  return hierarchy[nivel1] >= hierarchy[nivel2];
};

export const PermissionChecker = {
  // Verifica se o usu√°rio pode visualizar funcionalidades b√°sicas
  canView: (nivel) => {
    // Admin sempre pode visualizar tudo
    if (isAdminTotal(nivel)) return true;
    // Todos os outros usu√°rios autenticados podem visualizar funcionalidades b√°sicas
    return nivel !== undefined && nivel !== null;
  },

  // Verifica se o usu√°rio pode editar outro usu√°rio
  // SISTEMA REVERSIVO: N√≠veis menores = Maior permiss√£o
  canEditUser: (nivelEditor, idEditor, idAlvo, nivelAlvo) => {
    // Admin pode editar qualquer um
    if (isAdmin(nivelEditor)) return true;
    
    // Usu√°rio pode editar pr√≥prio perfil
    if (idEditor === idAlvo) return true;
    
    // Sistema reversivo: s√≥ pode editar usu√°rios de n√≠vel MAIOR (menor permiss√£o)
    // Ex: Supervisor (2) pode editar Gerente Setor (3), Gerente Geral (4), etc.
    if (nivelEditor < nivelAlvo) return true;
    
    return false;
  },

  // Verifica se o usu√°rio pode gerenciar opera√ß√µes (invent√°rio, empr√©stimos, etc)
  canManageOperational: (nivel) => {
    return hasSupervisionPermission(nivel);
  },

  // Verifica se o usu√°rio pode gerenciar funcion√°rios
  canManageEmployees: (nivel) => {
    return hasManagementPermission(nivel);
  },

  // Verifica se o usu√°rio pode gerenciar usu√°rios do sistema
  canManageUsers: (nivel) => {
    return isAdmin(nivel) || nivel <= NIVEIS_PERMISSAO.SUPERVISOR; // 0, 1, 2
  },

  // Verifica se o usu√°rio pode excluir registros
  canDelete: (nivel) => {
    return hasManagementPermission(nivel);
  },

  // Verifica se o usu√°rio pode ver informa√ß√µes sens√≠veis
  canViewSensitiveInfo: (nivel) => {
    return hasHighLevelPermission(nivel);
  },

  // Verifica se o usu√°rio pode realizar opera√ß√µes administrativas
  canPerformAdminActions: (nivel) => {
    return isAdmin(nivel);
  },

  // ==================== PERMISS√ïES POR SETOR ====================
  
  /**
   * Verifica se o usu√°rio pode ver todos os dados ou apenas do seu setor
   * Admin, CEO, RH, Gerente Geral: V√™ TUDO
   * Gerente Setor/Supervisor/Funcion√°rio: V√™ apenas do seu setor
   */
  canViewAllSectors: (nivel) => {
    return hasHighLevelPermission(nivel);
  },

  /**
   * Verifica se um item pertence ao setor do usu√°rio
   */
  itemBelongsToUserSector: (itemSetorId, userSetorId) => {
    if (!itemSetorId || !userSetorId) return false;
    return itemSetorId === userSetorId;
  },

  /**
   * Filtra uma lista de itens por setor do usu√°rio
   * Admin, CEO, RH, Gerente Geral: V√™ tudo
   * Gerente Setor/Supervisor/Funcion√°rio: V√™ apenas do seu setor
   */
  filterBySector: (items, usuario) => {
    // Admin, CEO, RH, Gerente Geral veem tudo
    if (PermissionChecker.canViewAllSectors(usuario.nivel)) {
      return items;
    }

    // Outros veem apenas do seu setor
    if (!usuario.setorId) {
      return [];
    }

    return items.filter(item => {
      // Se o item tem setorId, comparar
      if (item.setorId) {
        return item.setorId === usuario.setorId;
      }
      
      // Se o item √© um funcion√°rio com setorId
      if (item.funcionarioSetorId) {
        return item.funcionarioSetorId === usuario.setorId;
      }

      // Se o item tem rela√ß√£o com funcion√°rio, verificar o setor do funcion√°rio
      if (item.funcionarioId && item.funcionario) {
        return item.funcionario.setorId === usuario.setorId;
      }

      // Por padr√£o, n√£o mostrar itens sem setor definido
      return false;
    });
  },

  /**
   * Verifica se o usu√°rio pode gerenciar um item espec√≠fico
   * Admin, CEO, RH, Gerente Geral: Pode gerenciar tudo
   * Gerente Setor/Supervisor: Pode gerenciar apenas itens do seu setor
   * Funcion√°rio: N√£o pode gerenciar
   */
  canManageItem: (nivel, itemSetorId, userSetorId) => {
    // Admin, CEO, RH, Gerente Geral podem gerenciar tudo
    if (hasHighLevelPermission(nivel)) return true;

    // Funcion√°rio n√£o pode gerenciar
    if (isFuncionario(nivel)) return false;

    // Gerente Setor/Supervisor podem gerenciar apenas do seu setor
    if (hasSupervisionPermission(nivel)) {
      return itemSetorId === userSetorId;
    }

    return false;
  },

  /**
   * Verifica se um usu√°rio pode criar itens em um determinado setor
   */
  canCreateInSector: (nivel, targetSetorId, userSetorId) => {
    // Admin, CEO, RH, Gerente Geral podem criar em qualquer setor
    if (hasHighLevelPermission(nivel)) return true;

    // Gerente Setor/Supervisor podem criar apenas no seu setor
    if (hasSupervisionPermission(nivel)) {
      return targetSetorId === userSetorId;
    }

    return false;
  }
};
