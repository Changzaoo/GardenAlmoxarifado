rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares de segurança
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.nivel > 2;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTimestamp() {
      return request.time.toMillis() <= (request.resource.data.timestamp + 300000) // 5 minutos de tolerância
         && request.time.toMillis() >= (request.resource.data.timestamp - 300000);
    }
    
    function hasMinLevel(minLevel) {
      return isAuthenticated() && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.nivel >= minLevel;
    }

    // Regras para templates de tarefas
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow create, update: if hasMinLevel(2);
      allow delete: if hasMinLevel(2);
    }
    
    // Regras para usuários
    match /usuarios/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Regras para inventário
    match /inventario/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidTimestamp();
    }
    
    // Regras para empréstimos
    match /emprestimos/{emprestimoId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp();
      allow update: if isAdmin() && isValidTimestamp();
      allow delete: if isAdmin();
    }
    
    // Regras para verificações mensais
    match /verificacoes_mensais/{verificacaoId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidTimestamp();
    }
    
    // Regras para ferramentas danificadas
    match /ferramentas_danificadas/{id} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidTimestamp();
    }
    
    // Regras para ferramentas perdidas
    match /ferramentas_perdidas/{id} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidTimestamp();
    }
    
    // Regras para histórico
    match /historico/{id} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp();
      allow update, delete: if false; // Histórico não deve ser modificado
    }
    // Regras para chats
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
        
      // Regras para mensagens dentro de cada chat
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow update: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read'])
        );
        allow delete: if false; // Mensagens não podem ser deletadas
      }
    }
  }
}
