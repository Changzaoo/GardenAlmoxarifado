rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Regra padrÃ£o - negar todo acesso por padrÃ£o
    match /{document=**} {
      allow read, write: if false;
    }
    // FunÃ§Ãµes auxiliares de seguranÃ§a
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/usuario/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.nivel > 2;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTimestamp() {
      return request.resource.data.keys().hasAll(['timestamp']) &&
             request.time.toMillis() <= (request.resource.data.timestamp + 300000) && // 5 minutos de tolerÃ¢ncia
             request.time.toMillis() >= (request.resource.data.timestamp - 300000);
    }
    
    function hasMinLevel(minLevel) {
      return isAuthenticated() && exists(/databases/$(database)/documents/usuario/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.nivel >= minLevel;
    }

    // Regras para templates de tarefas
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow create, update: if hasMinLevel(2) && request.resource.data.keys().hasAll(['title', 'description', 'createdBy']);
      allow delete: if hasMinLevel(2);
    }
    
    // Regras para usuÃ¡rios - coleÃ§Ã£o mais crÃ­tica
    match /usuario/{userId} {
      allow read: if isAuthenticated() && (isAdmin() || isOwner(userId));
      allow create: if isAdmin() && request.resource.data.keys().hasAll(['nome', 'email', 'nivel', 'dataCriacao']);
      allow update: if (isAdmin() || isOwner(userId)) && 
                   (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['nivel']) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Regras para inventÃ¡rio
    match /inventario/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['nome', 'quantidade', 'categoria', 'status']);
      allow update: if isAdmin() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['nome', 'quantidade', 'categoria', 'status']);
      allow delete: if isAdmin();
    }
    
    // Regras para documentos legais
    match /legal/{documentoId} {
      allow read: if isAuthenticated();
      allow create: if hasMinLevel(2) && 
                   request.resource.data.keys().hasAll(['titulo', 'tipo', 'conteudo', 'versao', 'status', 'dataCriacao', 'criadoPor']);
      allow update: if hasMinLevel(2) && 
                   request.resource.data.keys().hasAll(['titulo', 'tipo', 'conteudo', 'versao', 'status', 'dataCriacao', 'criadoPor']);
      allow delete: if hasMinLevel(2);
    }

    // Regras para emprÃ©stimos
    match /emprestimos/{emprestimoId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['funcionarioId', 'ferramentaId', 'dataEmprestimo', 'dataDevolucaoPrevista']);
      allow update: if isAdmin() && isValidTimestamp();
      allow delete: if isAdmin();
    }
    
    // Regras para verificaÃ§Ãµes mensais
    match /verificacoes_mensais/{verificacaoId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['data', 'responsavel', 'itens']);
      allow update: if isAdmin() && isValidTimestamp();
      allow delete: if false; // NÃ£o permitir exclusÃ£o de verificaÃ§Ãµes mensais
    }
    
    // Regras para ferramentas danificadas
    match /ferramentas_danificadas/{id} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['ferramentaId', 'dataDano', 'descricao', 'reportadoPor']);
      allow update: if isAdmin() && isValidTimestamp();
      allow delete: if isAdmin();
    }
    
    // Regras para ferramentas perdidas
    match /ferramentas_perdidas/{id} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['ferramentaId', 'dataPerda', 'descricao', 'reportadoPor']);
      allow update: if isAdmin() && isValidTimestamp();
      allow delete: if isAdmin();
    }
    
    // Regras para histÃ³rico - imutÃ¡vel apÃ³s criaÃ§Ã£o
    match /historico/{id} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['tipo', 'data', 'descricao', 'usuario']);
      allow update, delete: if false; // HistÃ³rico nÃ£o deve ser modificado
    }

    // ==================== SISTEMA DE MENSAGENS ====================
    
    // Regras para conversas
    match /conversas/{conversaId} {
      // Permitir leitura se o usuÃ¡rio Ã© participante
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participantes;
      
      // Permitir criaÃ§Ã£o de novas conversas
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participantes;
      
      // Permitir atualizaÃ§Ã£o se o usuÃ¡rio Ã© participante
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participantes;
      
      // Permitir exclusÃ£o apenas para grupos (admin do grupo)
      allow delete: if isAuthenticated() && 
                       resource.data.tipo == 'grupo' &&
                       resource.data.admin == request.auth.uid;
      
      // Regras para mensagens dentro de conversas
      match /mensagens/{mensagemId} {
        // Permitir leitura se o usuÃ¡rio Ã© participante da conversa
        allow read: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/conversas/$(conversaId)).data.participantes;
        
        // Permitir criaÃ§Ã£o se o usuÃ¡rio Ã© participante
        allow create: if isAuthenticated() && 
                         request.auth.uid in get(/databases/$(database)/documents/conversas/$(conversaId)).data.participantes &&
                         request.resource.data.remetenteId == request.auth.uid;
        
        // Permitir atualizaÃ§Ã£o apenas do prÃ³prio usuÃ¡rio
        allow update: if isAuthenticated() && 
                         resource.data.remetenteId == request.auth.uid;
        
        // Permitir exclusÃ£o apenas do prÃ³prio usuÃ¡rio
        allow delete: if isAuthenticated() && 
                         resource.data.remetenteId == request.auth.uid;
      }
    }
    
    // Regras para usuÃ¡rios (necessÃ¡rio para buscar info de outros usuÃ¡rios)
    match /usuario/{userId} {
      // Qualquer usuÃ¡rio autenticado pode ler outros usuÃ¡rios (para mensagens)
      allow read: if isAuthenticated();
      
      // Apenas o prÃ³prio usuÃ¡rio ou admin pode atualizar
      allow update: if isAuthenticated() && 
                       (request.auth.uid == userId || isAdmin());
      
      // Permitir atualizaÃ§Ã£o do campo fcmTokens para notificaÃ§Ãµes push
      allow update: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fcmTokens', 'status', 'ultimaVez']);
    }
    
    // Regras para Analytics de Acesso
    match /analytics_acessos/{acessoId} {
      // Qualquer usuÃ¡rio autenticado pode criar seu registro de acesso
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['timestamp', 'usuario', 'systemInfo', 'version']);
      
      // Apenas Admin (nÃ­vel 4) pode ler os registros
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/usuario/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.nivel == 4;
      
      // NinguÃ©m pode atualizar ou deletar registros (imutÃ¡vel)
      allow update, delete: if false;
    }

    // ðŸ§ª Regras para testes de conexÃ£o (backup_test)
    match /backup_test/{testId} {
      // Apenas administradores (nÃ­vel >= 3) podem fazer testes
      allow read, write: if isAuthenticated() && 
                            exists(/databases/$(database)/documents/usuario/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.nivel >= 3;
    }
  }
}
