rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Regra padrão - negar todo acesso por padrão
    match /{document=**} {
      allow read, write: if false;
    }
    // Funções auxiliares de segurança
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      // Admin é nível 0
      return isAuthenticated() && exists(/databases/$(database)/documents/usuario/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.nivel == 0;
    }
    
    function isManagementLevel() {
      // Nível 2 ou superior (Supervisor, Gerente, etc.)
      return isAuthenticated() && exists(/databases/$(database)/documents/usuario/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.nivel >= 2;
    }
    
    function isAdminOrManagement() {
      // Admin (nível 0) ou gerência (nível 2+)
      return isAdmin() || isManagementLevel();
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTimestamp() {
      return request.resource.data.keys().hasAll(['timestamp']) &&
             request.time.toMillis() <= (request.resource.data.timestamp + 300000) && // 5 minutos de tolerância
             request.time.toMillis() >= (request.resource.data.timestamp - 300000);
    }
    
    function hasMinLevel(minLevel) {
      return isAuthenticated() && exists(/databases/$(database)/documents/usuario/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/usuario/$(request.auth.uid)).data.nivel >= minLevel;
    }

    // Regras para templates de tarefas
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow create, update: if hasMinLevel(2) && request.resource.data.keys().hasAll(['title', 'description', 'createdBy']);
      allow delete: if hasMinLevel(2);
    }
    
    // Regras para usuários - coleção mais crítica
    match /usuario/{userId} {
      // Admin (nível 0) e gerência (nível 2+) podem ver todos os usuários
      // Outros usuários só podem ver o próprio perfil
      allow read: if isAuthenticated() && (isAdminOrManagement() || isOwner(userId));
      
      // Apenas admin pode criar usuários
      allow create: if isAdmin() && request.resource.data.keys().hasAll(['nome', 'email', 'nivel', 'dataCriacao']);
      
      // Admin pode atualizar qualquer usuário
      // Usuário pode atualizar próprio perfil, exceto o nível de permissão
      allow update: if (isAdmin() || isOwner(userId)) && 
                   (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['nivel']) || isAdmin());
      
      // Apenas admin pode deletar usuários
      allow delete: if isAdmin();
    }

    // ✅ Regras para funcionários
    match /funcionarios/{funcionarioId} {
      // Qualquer usuário autenticado pode ler dados de funcionários
      // Necessário para visualizar lista de funcionários, selecionar em formulários, etc.
      allow read: if isAuthenticated();
      
      // Apenas usuários com nível >= 2 (supervisor/gerente/admin) podem criar funcionários
      allow create: if hasMinLevel(2);
      
      // Apenas usuários com nível >= 2 podem atualizar dados de funcionários
      allow update: if hasMinLevel(2);
      
      // Apenas admin pode deletar funcionários
      allow delete: if isAdmin();
    }

    // ✅ Regras para empresas
    match /empresas/{empresaId} {
      // Qualquer usuário autenticado pode ler empresas
      allow read: if isAuthenticated();
      
      // Apenas usuários com nível >= 2 podem criar/editar empresas
      allow create, update: if hasMinLevel(2);
      
      // Apenas admin pode deletar empresas
      allow delete: if isAdmin();
    }

    // ✅ Regras para setores
    match /setores/{setorId} {
      // Qualquer usuário autenticado pode ler setores
      allow read: if isAuthenticated();
      
      // Apenas usuários com nível >= 2 podem criar/editar setores
      allow create, update: if hasMinLevel(2);
      
      // Apenas admin pode deletar setores
      allow delete: if isAdmin();
    }

    // ✅ Regras para horários
    match /horarios/{horarioId} {
      // Qualquer usuário autenticado pode ler horários
      allow read: if isAuthenticated();
      
      // Apenas usuários com nível >= 2 podem criar/editar horários
      allow create, update: if hasMinLevel(2);
      
      // Apenas admin pode deletar horários
      allow delete: if isAdmin();
    }
    
    // Regras para inventário
    match /inventario/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrManagement() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['nome', 'quantidade', 'categoria', 'status']);
      allow update: if isAdminOrManagement() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['nome', 'quantidade', 'categoria', 'status']);
      allow delete: if isAdmin();
    }
    
    // Regras para documentos legais
    match /legal/{documentoId} {
      allow read: if isAuthenticated();
      allow create: if hasMinLevel(2) && 
                   request.resource.data.keys().hasAll(['titulo', 'tipo', 'conteudo', 'versao', 'status', 'dataCriacao', 'criadoPor']);
      allow update: if hasMinLevel(2) && 
                   request.resource.data.keys().hasAll(['titulo', 'tipo', 'conteudo', 'versao', 'status', 'dataCriacao', 'criadoPor']);
      allow delete: if hasMinLevel(2);
    }

    // Regras para empréstimos
    match /emprestimos/{emprestimoId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrManagement() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['funcionarioId', 'ferramentaId', 'dataEmprestimo', 'dataDevolucaoPrevista']);
      allow update: if isAdminOrManagement() && isValidTimestamp();
      allow delete: if isAdmin();
    }
    
    // Regras para verificações mensais
    match /verificacoes_mensais/{verificacaoId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrManagement() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['data', 'responsavel', 'itens']);
      allow update: if isAdminOrManagement() && isValidTimestamp();
      allow delete: if false; // Não permitir exclusão de verificações mensais
    }
    
    // Regras para ferramentas danificadas
    match /ferramentas_danificadas/{id} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrManagement() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['ferramentaId', 'dataDano', 'descricao', 'reportadoPor']);
      allow update: if isAdminOrManagement() && isValidTimestamp();
      allow delete: if isAdmin();
    }
    
    // Regras para ferramentas perdidas
    match /ferramentas_perdidas/{id} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrManagement() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['ferramentaId', 'dataPerda', 'descricao', 'reportadoPor']);
      allow update: if isAdminOrManagement() && isValidTimestamp();
      allow delete: if isAdmin();
    }
    
    // Regras para histórico - imutável após criação
    match /historico/{id} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrManagement() && isValidTimestamp() && 
                   request.resource.data.keys().hasAll(['tipo', 'data', 'descricao', 'usuario']);
      allow update, delete: if false; // Histórico não deve ser modificado
    }

    // ==================== SISTEMA DE MENSAGENS ====================
    
    // Regras para conversas
    match /conversas/{conversaId} {
      // Permitir leitura se o usuário é participante
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participantes;
      
      // Permitir criação de novas conversas
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participantes;
      
      // Permitir atualização se o usuário é participante
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participantes;
      
      // Permitir exclusão apenas para grupos (admin do grupo)
      allow delete: if isAuthenticated() && 
                       resource.data.tipo == 'grupo' &&
                       resource.data.admin == request.auth.uid;
      
      // Regras para mensagens dentro de conversas
      match /mensagens/{mensagemId} {
        // Permitir leitura se o usuário é participante da conversa
        allow read: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/conversas/$(conversaId)).data.participantes;
        
        // Permitir criação se o usuário é participante
        allow create: if isAuthenticated() && 
                         request.auth.uid in get(/databases/$(database)/documents/conversas/$(conversaId)).data.participantes &&
                         request.resource.data.remetenteId == request.auth.uid;
        
        // Permitir atualização apenas do próprio usuário
        allow update: if isAuthenticated() && 
                         resource.data.remetenteId == request.auth.uid;
        
        // Permitir exclusão apenas do próprio usuário
        allow delete: if isAuthenticated() && 
                         resource.data.remetenteId == request.auth.uid;
      }
    }
    
    // NOTA: Regras de usuários já definidas acima - não duplicar
    
    // Regras para Analytics de Acesso
    match /analytics_acessos/{acessoId} {
      // Qualquer usuário autenticado pode criar seu registro de acesso
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['timestamp', 'usuario', 'systemInfo', 'version']);
      
      // Admin (nível 0) e gerência (nível 2+) podem ler os registros
      allow read: if isAuthenticated() && isAdminOrManagement();
      
      // Ninguém pode atualizar ou deletar registros (imutável)
      allow update, delete: if false;
    }

    // 🧪 Regras para testes de conexão (backup_test)
    match /backup_test/{testId} {
      // Admin (nível 0) e gerência (nível 2+) podem fazer testes
      allow read, write: if isAuthenticated() && isAdminOrManagement();
    }

    // ⏰ Regras para registro de ponto (WorkPonto)
    match /pontos/{pontoId} {
      // ✅ Qualquer usuário autenticado pode ler TODOS os registros de ponto
      // Necessário para visualizar pontos de funcionários e relatórios
      allow read: if isAuthenticated();
      
      // ✅ Qualquer usuário autenticado pode criar registro de ponto
      // Validações: campos obrigatórios e tipo válido
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['funcionarioId', 'funcionarioNome', 'tipo', 'data', 'timestamp']) &&
                       request.resource.data.tipo in ['entrada', 'saida_almoco', 'retorno_almoco', 'saida'];
      
      // ✅ CORREÇÃO: Permitir que usuários com nível >= 2 editem e deletem pontos
      // Admin (nível 0) pode tudo
      // Gerentes/Supervisores (nível 1, 2) podem editar/deletar pontos
      // Usuários comuns podem deletar apenas seus próprios pontos
      allow update: if isAuthenticated() && 
                       (hasMinLevel(0) || // Admin
                        hasMinLevel(1) || // Gerente
                        hasMinLevel(2));  // Supervisor
      
      allow delete: if isAuthenticated() && 
                       (hasMinLevel(0) || // Admin pode deletar qualquer ponto
                        hasMinLevel(1) || // Gerente pode deletar qualquer ponto
                        hasMinLevel(2) || // Supervisor pode deletar qualquer ponto
                        resource.data.funcionarioId == request.auth.uid); // Usuário pode deletar só seus pontos
    }
    
    // ✅ Regras para QR Codes de autenticação
    match /qr_codes_auth/{qrCodeId} {
      // Apenas admins podem criar QR Codes
      allow create: if isAuthenticated() && hasMinLevel(0);
      
      // Qualquer pessoa (mesmo não autenticada) pode ler para validar
      // Isso é necessário para que usuários que ainda não têm conta possam usar o QR Code
      allow read: if true;
      
      // Apenas admins ou o sistema pode atualizar (marcar como usado)
      allow update: if isAuthenticated() && 
                       (hasMinLevel(0) || 
                        (request.resource.data.diff(resource.data).affectedKeys().hasAll(['usado', 'usadoEm', 'usadoPor']) && 
                         !resource.data.usado));
      
      // Apenas admins podem deletar
      allow delete: if isAuthenticated() && hasMinLevel(0);
    }
  }
}
