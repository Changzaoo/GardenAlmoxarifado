<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/logo.png" type="image/png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#16181C" media="(prefers-color-scheme: dark)" />
    <meta name="theme-color" content="#FFFFFF" media="(prefers-color-scheme: light)" />
    <meta name="description" content="Workflow - Sistema de gestão empresarial completo" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo.png" />
    <link rel="manifest" href="/manifest.json?v=1.0">

    <!-- Preload de fontes para melhor performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    
    <title>Workflow</title>
    
    <!-- Meta tags adicionais para SEO -->
    <meta name="robots" content="noindex, nofollow" />
    <meta name="author" content="Workflow" />
    <meta name="keywords" content="workflow, gestão, inventário, empresarial, sistema" />
    
    <!-- PWA meta tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Workflow" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="application-name" content="Workflow" />
    <meta name="msapplication-TileColor" content="#1DA1F2" />
    <meta name="msapplication-tap-highlight" content="no" />
    <meta name="theme-color" content="#1DA1F2" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#1f2937" media="(prefers-color-scheme: dark)" />
    
    <!-- iOS splash screens -->
    <link rel="apple-touch-startup-image" href="%PUBLIC_URL%/icons/apple-splash-2048-2732.jpg" media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="%PUBLIC_URL%/icons/apple-splash-1668-2388.jpg" media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="%PUBLIC_URL%/icons/apple-splash-1536-2048.jpg" media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="%PUBLIC_URL%/icons/apple-splash-1125-2436.jpg" media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)" />
    <link rel="apple-touch-startup-image" href="%PUBLIC_URL%/icons/apple-splash-1242-2688.jpg" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)" />
    
    <style>
      body {
        margin: 0;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        background: var(--loading-bg-light);
        color: var(--loading-text-light);
        z-index: 9999;
        transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .initial-loading.dark-mode {
        background: var(--loading-bg-dark);
        color: var(--loading-text-dark);
      }

      @media (prefers-color-scheme: dark) {
        .initial-loading:not(.light-mode) {
          background: var(--loading-bg-dark);
          color: var(--loading-text-dark);
        }
      }

      /* Animação de saída sofisticada */
      .initial-loading.fade-out {
        opacity: 0;
        pointer-events: none;
      }

      .initial-loading.zoom-out .loading-content {
        animation: zoomOut 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }

      @keyframes zoomOut {
        0% {
          transform: scale(1);
          opacity: 1;
        }
        100% {
          transform: scale(1.2);
          opacity: 0;
        }
      }

      /* Grid de fundo animado */
      .loading-bg-grid {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
          linear-gradient(rgba(59, 130, 246, 0.03) 1px, transparent 1px),
          linear-gradient(90deg, rgba(59, 130, 246, 0.03) 1px, transparent 1px);
        background-size: 50px 50px;
        opacity: 0.5;
        animation: gridMove 20s linear infinite;
      }

      .dark-mode .loading-bg-grid {
        background-image: 
          linear-gradient(rgba(96, 165, 250, 0.05) 1px, transparent 1px),
          linear-gradient(90deg, rgba(96, 165, 250, 0.05) 1px, transparent 1px);
      }

      @keyframes gridMove {
        0% {
          transform: translate(0, 0);
        }
        100% {
          transform: translate(50px, 50px);
        }
      }

      /* Container do conteúdo */
      .loading-content {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 32px;
        z-index: 1;
      }

      /* Logo do Workflow */
      .workflow-logo-container {
        position: relative;
        width: 120px;
        height: 120px;
        animation: logoEntrance 1.2s cubic-bezier(0.34, 1.56, 0.64, 1);
      }

      @keyframes logoEntrance {
        0% {
          transform: scale(0) rotate(-180deg);
          opacity: 0;
        }
        100% {
          transform: scale(1) rotate(0deg);
          opacity: 1;
        }
      }

      .workflow-logo {
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 50%, #1d4ed8 100%);
        border-radius: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 
          0 0 0 0 rgba(59, 130, 246, 0.4),
          0 20px 60px rgba(59, 130, 246, 0.3),
          0 10px 30px rgba(0, 0, 0, 0.1);
        animation: logoPulse 3s ease-in-out infinite;
        position: relative;
        overflow: hidden;
      }

      .dark-mode .workflow-logo {
        box-shadow: 
          0 0 0 0 rgba(96, 165, 250, 0.4),
          0 20px 60px rgba(96, 165, 250, 0.4),
          0 10px 30px rgba(0, 0, 0, 0.3);
      }

      @keyframes logoPulse {
        0%, 100% {
          transform: scale(1);
          box-shadow: 
            0 0 0 0 rgba(59, 130, 246, 0.4),
            0 20px 60px rgba(59, 130, 246, 0.3),
            0 10px 30px rgba(0, 0, 0, 0.1);
        }
        50% {
          transform: scale(1.05);
          box-shadow: 
            0 0 0 20px rgba(59, 130, 246, 0),
            0 25px 70px rgba(59, 130, 246, 0.4),
            0 15px 40px rgba(0, 0, 0, 0.15);
        }
      }

      /* Brilho no logo */
      .workflow-logo::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        animation: logoShine 3s infinite;
      }

      @keyframes logoShine {
        0% {
          left: -100%;
        }
        50%, 100% {
          left: 100%;
        }
      }

      .workflow-logo svg {
        width: 64px;
        height: 64px;
        color: white;
        filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.2));
        animation: iconFloat 3s ease-in-out infinite;
      }

      @keyframes iconFloat {
        0%, 100% {
          transform: translateY(0px);
        }
        50% {
          transform: translateY(-8px);
        }
      }

      /* Título Workflow */
      .workflow-title {
        font-size: 48px;
        font-weight: 900;
        letter-spacing: -1px;
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: titleFade 1s ease-out 0.3s both;
        text-transform: uppercase;
      }

      .dark-mode .workflow-title {
        background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      @keyframes titleFade {
        0% {
          opacity: 0;
          transform: translateY(20px);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Progress bar container */
      .progress-container {
        width: 280px;
        animation: progressFade 1s ease-out 0.6s both;
      }

      @keyframes progressFade {
        0% {
          opacity: 0;
          transform: translateY(10px);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .progress-bar-bg {
        width: 100%;
        height: 4px;
        background: rgba(59, 130, 246, 0.1);
        border-radius: 2px;
        overflow: hidden;
        position: relative;
      }

      .dark-mode .progress-bar-bg {
        background: rgba(96, 165, 250, 0.1);
      }

      .progress-bar-fill {
        height: 100%;
        background: linear-gradient(90deg, #3b82f6, #2563eb, #3b82f6);
        background-size: 200% 100%;
        border-radius: 2px;
        width: 0%;
        transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        animation: shimmer 2s infinite;
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
      }

      .dark-mode .progress-bar-fill {
        background: linear-gradient(90deg, #60a5fa, #3b82f6, #60a5fa);
        background-size: 200% 100%;
        box-shadow: 0 0 10px rgba(96, 165, 250, 0.6);
      }

      @keyframes shimmer {
        0% {
          background-position: 200% 0;
        }
        100% {
          background-position: -200% 0;
        }
      }

      .progress-text {
        margin-top: 12px;
        font-size: 13px;
        font-weight: 600;
        text-align: center;
        opacity: 0.7;
        letter-spacing: 0.5px;
      }

      .progress-percentage {
        display: block;
        margin-top: 4px;
        font-size: 24px;
        font-weight: 700;
        color: var(--loading-accent);
      }

      .dark-mode .progress-percentage {
        color: var(--loading-accent-dark);
      }

      /* Partículas de fundo */
      .particle {
        position: absolute;
        width: 4px;
        height: 4px;
        background: var(--loading-accent);
        border-radius: 50%;
        opacity: 0;
        animation: particleFloat 4s infinite;
      }

      .dark-mode .particle {
        background: var(--loading-accent-dark);
      }

      @keyframes particleFloat {
        0% {
          opacity: 0;
          transform: translateY(0) scale(0);
        }
        10% {
          opacity: 0.6;
        }
        90% {
          opacity: 0.6;
        }
        100% {
          opacity: 0;
          transform: translateY(-100vh) scale(1);
        }
      }

      /* Animação de entrada no sistema (100%) */
      .initial-loading.entering .workflow-logo-container {
        animation: logoExpand 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }

      @keyframes logoExpand {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.3);
        }
        100% {
          transform: scale(120);
          opacity: 0;
        }
      }

      .initial-loading.entering .workflow-title,
      .initial-loading.entering .progress-container {
        animation: contentFadeOut 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }

      @keyframes contentFadeOut {
        0% {
          opacity: 1;
          transform: translateY(0);
        }
        100% {
          opacity: 0;
          transform: translateY(-30px);
        }
      }

      /* Ocultar loading quando React carregar */
      #root:not(:empty) + .initial-loading {
        display: none;
      }

      /* Responsivo */
      @media (max-width: 640px) {
        .workflow-logo-container {
          width: 100px;
          height: 100px;
        }

        .workflow-logo svg {
          width: 52px;
          height: 52px;
        }

        .workflow-title {
          font-size: 36px;
        }

        .progress-container {
          width: 240px;
        }
      }
    </style>
    
  </head>
  
  <body>
    <noscript>
      <div style="text-align: center; padding: 50px; font-family: Arial, sans-serif;">
        <h1>JavaScript Necessário</h1>
        <p>Este sistema requer JavaScript para funcionar corretamente.</p>
        <p>Por favor, habilite o JavaScript no seu navegador e recarregue a página.</p>
      </div>
    </noscript>
    
    <!-- Container principal da aplicação React -->
    <div id="root"></div>
    
    <!-- Loading screen inicial sofisticado -->
    <div class="initial-loading" id="initial-loading">
      <!-- Grid de fundo animado -->
      <div class="loading-bg-grid"></div>
      
      <!-- Partículas flutuantes -->
      <div class="particle" style="left: 10%; animation-delay: 0s;"></div>
      <div class="particle" style="left: 20%; animation-delay: 1s;"></div>
      <div class="particle" style="left: 30%; animation-delay: 2s;"></div>
      <div class="particle" style="left: 40%; animation-delay: 0.5s;"></div>
      <div class="particle" style="left: 50%; animation-delay: 1.5s;"></div>
      <div class="particle" style="left: 60%; animation-delay: 2.5s;"></div>
      <div class="particle" style="left: 70%; animation-delay: 0.8s;"></div>
      <div class="particle" style="left: 80%; animation-delay: 1.8s;"></div>
      <div class="particle" style="left: 90%; animation-delay: 2.8s;"></div>
      
      <!-- Conteúdo central -->
      <div class="loading-content">
        <!-- Logo Workflow -->
        <div class="workflow-logo-container">
          <div class="workflow-logo">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
        </div>
        
        <!-- Título -->
        <h1 class="workflow-title">WORKFLOW</h1>
        
        <!-- Barra de progresso -->
        <div class="progress-container">
          <div class="progress-bar-bg">
            <div class="progress-bar-fill" id="progress-bar"></div>
          </div>
          <p class="progress-text">
            Iniciando sistema
            <span class="progress-percentage" id="progress-percentage">0%</span>
          </p>
        </div>
      </div>
    </div>
    
    <script>
      // Aplicar tema ao loading screen IMEDIATAMENTE (executa inline)
      (function() {
        try {
          // IMPORTANTE: Usar a mesma chave que o ThemeSystem.jsx usa
          const savedTheme = localStorage.getItem('workflow-theme');
          const loadingElement = document.getElementById('initial-loading');
          
          console.log('🎨 Tema detectado no localStorage:', savedTheme);
          
          if (loadingElement) {
            if (savedTheme === 'dark') {
              loadingElement.classList.add('dark-mode');
              loadingElement.classList.remove('light-mode');
              console.log('✅ Dark mode aplicado ao loading screen');
            } else if (savedTheme === 'light') {
              loadingElement.classList.add('light-mode');
              loadingElement.classList.remove('dark-mode');
              console.log('✅ Light mode aplicado ao loading screen');
            } else {
              // Se não há tema salvo, detecta preferência do sistema
              const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
              if (prefersDark) {
                loadingElement.classList.add('dark-mode');
                console.log('⚠️ Nenhum tema salvo, usando dark mode (preferência do sistema)');
              } else {
                loadingElement.classList.add('light-mode');
                console.log('⚠️ Nenhum tema salvo, usando light mode (preferência do sistema)');
              }
            }
          } else {
            console.error('❌ Elemento initial-loading não encontrado');
          }
          
          // Atualizar meta theme-color também
          const metaTheme = document.querySelector('meta[name="theme-color"]');
          if (metaTheme) {
            if (savedTheme === 'dark') {
              metaTheme.content = '#1a1a1a';
            } else if (savedTheme === 'light') {
              metaTheme.content = '#ffffff';
            } else {
              // Fallback para preferência do sistema
              const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
              metaTheme.content = prefersDark ? '#1a1a1a' : '#ffffff';
            }
            console.log('✅ Meta theme-color atualizado:', metaTheme.content);
          }
        } catch (e) {
          console.error('❌ Error applying theme to loading screen:', e);
        }
      })();
    </script>
    
    <!-- Script de animação de progresso e entrada no sistema -->
    <script>
      (function() {
        const progressBar = document.getElementById('progress-bar');
        const progressPercentage = document.getElementById('progress-percentage');
        const loadingElement = document.getElementById('initial-loading');
        const progressText = document.querySelector('.progress-text');
        
        let currentProgress = 0;
        const targetProgress = 100;
        const animationDuration = 3000; // 3 segundos para carregar
        const startTime = Date.now();
        
        // Mensagens de status durante o carregamento
        const statusMessages = [
          { percent: 0, text: 'Iniciando sistema' },
          { percent: 20, text: 'Carregando módulos' },
          { percent: 40, text: 'Conectando serviços' },
          { percent: 60, text: 'Preparando interface' },
          { percent: 80, text: 'Validando permissões' },
          { percent: 95, text: 'Finalizando' },
          { percent: 100, text: 'Pronto!' }
        ];
        
        function updateProgress() {
          const elapsed = Date.now() - startTime;
          const progress = Math.min((elapsed / animationDuration) * 100, 100);
          
          // Efeito de aceleração no final
          const easedProgress = progress < 95 
            ? progress 
            : 95 + (progress - 95) * 0.5;
          
          currentProgress = Math.floor(easedProgress);
          
          // Atualizar barra visual
          if (progressBar) {
            progressBar.style.width = currentProgress + '%';
          }
          
          // Atualizar porcentagem
          if (progressPercentage) {
            progressPercentage.textContent = currentProgress + '%';
          }
          
          // Atualizar mensagem de status
          const currentStatus = statusMessages
            .filter(s => s.percent <= currentProgress)
            .pop();
          
          if (currentStatus && progressText) {
            const textNode = progressText.childNodes[0];
            if (textNode) {
              textNode.textContent = currentStatus.text + ' ';
            }
          }
          
          // Continuar animação até 100%
          if (currentProgress < 100) {
            requestAnimationFrame(updateProgress);
          } else {
            // Quando chegar a 100%, iniciar animação de entrada
            setTimeout(() => {
              startEntranceAnimation();
            }, 500);
          }
        }
        
        function startEntranceAnimation() {
          console.log('🚀 Iniciando animação de entrada no sistema');
          
          if (loadingElement) {
            // Adicionar classe de entrada
            loadingElement.classList.add('entering');
            
            // Após a animação de expansão, fade out
            setTimeout(() => {
              loadingElement.classList.add('fade-out');
              
              // Remover elemento após fade
              setTimeout(() => {
                loadingElement.style.display = 'none';
              }, 800);
            }, 1000);
          }
        }
        
        // Detectar quando React carrega e ajustar progresso
        const observer = new MutationObserver((mutations) => {
          const rootElement = document.getElementById('root');
          if (rootElement && rootElement.children.length > 0) {
            // React carregou, garantir que progresso chegue a 100%
            if (currentProgress < 100) {
              currentProgress = 100;
              if (progressBar) progressBar.style.width = '100%';
              if (progressPercentage) progressPercentage.textContent = '100%';
              
              setTimeout(() => {
                startEntranceAnimation();
              }, 300);
            }
            observer.disconnect();
          }
        });
        
        observer.observe(document.getElementById('root'), {
          childList: true,
          subtree: true
        });
        
        // Iniciar animação de progresso
        requestAnimationFrame(updateProgress);
      })();
    </script>
    
    <!-- Service Worker registration -->
    <script>
      // Verificar se o browser suporta service workers
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/service-worker.js')
            .then((registration) => {
              console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
              console.log('SW registration failed: ', registrationError);
            });
        });
      }
    </script>
  </body>
</html>