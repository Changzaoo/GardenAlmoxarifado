// ==============================================================================
// üîë NOVO SISTEMA DE LOGIN COM CAMPO SENHA1533
// ==============================================================================
// 
// Este arquivo cont√©m o c√≥digo atualizado para a fun√ß√£o login() que deve
// substituir o c√≥digo atual no arquivo src/components/Workflow.jsx
//
// INSTRU√á√ïES:
// 1. Abra o arquivo src/components/Workflow.jsx
// 2. Localize a fun√ß√£o login (por volta da linha 760-900)
// 3. Substitua APENAS o bloco de verifica√ß√£o de senha pelo c√≥digo abaixo
// 
// ==============================================================================

const login = async (email, senha, lembrarLogin = false) => {
    try {
        console.log('üîê Tentativa de login:', { email, senhaLength: senha.length });
        console.log('üîç Buscando usu√°rio no Firebase Backup (garden-backup)...');
        
        // Buscar usu√°rio diretamente do Firebase Backup usando o campo email
        let usuarioEncontrado = null;
        
        try {
            const usuariosRef = collection(backupDb, 'usuarios');
            const q = query(usuariosRef, where('email', '==', email));
            const querySnapshot = await getDocs(q);
            
            if (!querySnapshot.empty) {
                const userDoc = querySnapshot.docs[0];
                usuarioEncontrado = {
                    id: userDoc.id,
                    ...userDoc.data()
                };
                console.log('‚úÖ Usu√°rio encontrado no Firebase Backup:', {
                    id: usuarioEncontrado.id,
                    email: usuarioEncontrado.email,
                    nivel: usuarioEncontrado.nivel,
                    ativo: usuarioEncontrado.ativo,
                    temSenha1533: !!usuarioEncontrado.senha1533
                });
            } else {
                console.log('‚ùå Nenhum usu√°rio encontrado com o email:', email);
            }
        } catch (firebaseError) {
            console.error('‚ùå Erro ao buscar usu√°rio no Firebase Backup:', firebaseError);
            // Fallback: tentar buscar nos usu√°rios carregados em mem√≥ria
            console.log('‚ö†Ô∏è Tentando fallback com usu√°rios em mem√≥ria...');
            if (usuarios.length === 0) {
                console.log('‚ö†Ô∏è Nenhum usu√°rio carregado, inicializando usu√°rios locais...');
                await initUsuariosLocais();
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            usuarioEncontrado = usuarios.find(u => u.email === email && u.ativo);
        }
        
        // Verificar se o usu√°rio foi encontrado e est√° ativo
        if (!usuarioEncontrado || !usuarioEncontrado.ativo) {
            console.log('‚ùå Usu√°rio n√£o encontrado ou inativo');
            if (usuarios.length > 0) {
                console.log('Usu√°rios dispon√≠veis:', usuarios.map(u => ({ email: u.email, ativo: u.ativo })));
            }
            console.log('');
            console.log('üí° Para testar, crie um usu√°rio na cole√ß√£o "usuarios" do Firebase Backup com:');
            console.log('   - Campo "email": seu email');
            console.log('   - Campo "senha1533": "1533"');
            console.log('   - Campo "ativo": true');
            console.log('   - Campo "nivel": 1-4 (1=Funcion√°rio, 2=Supervisor, 3=Gerente, 4=Admin)');
            return { success: false, message: 'Email ou senha incorretos' };
        }

        console.log('‚úÖ Usu√°rio encontrado:', {
            email: usuarioEncontrado.email,
            nivel: usuarioEncontrado.nivel,
            temSenha1533: !!usuarioEncontrado.senha1533,
            temSenhaHash: !!usuarioEncontrado.senhaHash,
            temSenhaSalt: !!usuarioEncontrado.senhaSalt,
            temSenhaTexto: !!usuarioEncontrado.senha
        });

        // ==============================================================================
        // üîë VERIFICA√á√ÉO DE SENHA COM NOVO CAMPO SENHA1533
        // ==============================================================================
        
        let senhaValida = false;

        console.log('üîë Verificando senha com campo senha1533...');
        console.log('Senha recebida:', senha);
        console.log('Campo senha1533 do usu√°rio:', usuarioEncontrado.senha1533);

        // Verificar se o usu√°rio tem o campo senha1533 (NOVO SISTEMA)
        if (usuarioEncontrado.senha1533) {
            // Usar o novo sistema com campo senha1533
            senhaValida = usuarioEncontrado.senha1533 === senha;
            console.log('‚úÖ Verifica√ß√£o usando campo senha1533:', senhaValida);
            
            if (senhaValida) {
                console.log('üéâ Login aprovado com novo sistema senha1533!');
            }
        } else {
            // Fallback: usu√°rio ainda n√£o migrado - usar sistema antigo
            console.log('‚ö†Ô∏è Usu√°rio sem campo senha1533, verificando senha antiga...');
            console.log('üìã Status de migra√ß√£o: Este usu√°rio ainda n√£o foi migrado para o novo sistema');
            
            // Verificar senha SHA-512 (se existir)
            if (usuarioEncontrado.senhaHash && usuarioEncontrado.senhaSalt) {
                console.log('üîí Verificando senha criptografada SHA-512...');
                senhaValida = verifyPassword(
                    senha, 
                    usuarioEncontrado.senhaHash, 
                    usuarioEncontrado.senhaSalt,
                    usuarioEncontrado.senhaVersion || 2
                );
                console.log('Resultado da verifica√ß√£o SHA-512:', senhaValida);
            } 
            // Verificar senha em texto plano (se existir)
            else if (usuarioEncontrado.senha) {
                console.log('üìù Verificando senha em texto plano...');
                senhaValida = usuarioEncontrado.senha === senha;
                console.log('Resultado da compara√ß√£o:', senhaValida);
                
                // Se v√°lida, N√ÉO migrar automaticamente - deixar para ferramenta de migra√ß√£o
                if (senhaValida) {
                    console.log('‚ö†Ô∏è ATEN√á√ÉO: Usu√°rio logou com senha antiga. Execute a migra√ß√£o!');
                }
            }
            
            console.log('Resultado da verifica√ß√£o de fallback:', senhaValida);
        }

        // Verificar se a senha √© v√°lida
        if (!senhaValida) {
            console.log('‚ùå Senha inv√°lida!');
            console.log('üí° Dica: A senha padr√£o para todos os usu√°rios √© "1533"');
            console.log('üîß Se o usu√°rio n√£o foi migrado, use a senha antiga ou execute a migra√ß√£o');
            return { success: false, message: 'Email ou senha incorretos' };
        }

        console.log('‚úÖ Senha v√°lida! Prosseguindo com login...');

        // ==============================================================================
        // RESTO DA FUN√á√ÉO LOGIN (N√ÉO ALTERAR)
        // ==============================================================================

        // Verificar se o usu√°rio tem setor e empresa definidos
        // EXCE√á√ÉO: Administradores (nivel 4) n√£o precisam ter setor, empresa ou cargo
        const isAdmin = usuarioEncontrado.nivel === NIVEIS_PERMISSAO.ADMIN;
        
        if (!isAdmin) {
            if (!usuarioEncontrado.setorId || !usuarioEncontrado.setorId.trim()) {
                return { 
                    success: false, 
                    message: 'Usu√°rio sem setor atribu√≠do. Entre em contato com o administrador.' 
                };
            }

            if (!usuarioEncontrado.empresaId || !usuarioEncontrado.empresaId.trim()) {
                return { 
                    success: false, 
                    message: 'Usu√°rio sem empresa atribu√≠da. Entre em contato com o administrador.' 
                };
            }
        }

        const usuarioAtualizado = {
            ...usuarioEncontrado,
            ultimoLogin: new Date().toISOString()
        };
        
        // Atualizar no Firebase Backup
        try {
            await updateDoc(doc(backupDb, 'usuarios', usuarioEncontrado.id), {
                ultimoLogin: usuarioAtualizado.ultimoLogin
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao atualizar √∫ltimo login no Firebase Backup:', error);
        }

        // Atualizar no Firebase Principal
        try {
            await updateDoc(doc(primaryDb, 'usuarios', usuarioEncontrado.id), {
                ultimoLogin: usuarioAtualizado.ultimoLogin
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao atualizar √∫ltimo login no Firebase Principal:', error);
        }

        // Atualizar usu√°rio no estado local
        setUsuario(usuarioAtualizado);

        // Salvar dados de login se lembrar estiver marcado
        if (lembrarLogin) {
            salvarDadosLogin(usuarioAtualizado, true);
        }

        console.log('‚úÖ Login realizado com sucesso!', {
            usuario: usuarioAtualizado.email,
            nivel: usuarioAtualizado.nivel,
            ultimoLogin: usuarioAtualizado.ultimoLogin,
            sistemaUsado: usuarioEncontrado.senha1533 ? 'NOVO (senha1533)' : 'ANTIGO (fallback)'
        });

        return { success: true, usuario: usuarioAtualizado };

    } catch (error) {
        console.error('‚ùå Erro no login:', error);
        return { success: false, message: 'Erro interno do sistema' };
    }
};

// ==============================================================================
// üìã INSTRU√á√ïES PARA IMPLEMENTA√á√ÉO:
// ==============================================================================
//
// 1. COPIE todo o c√≥digo acima
// 2. ABRA o arquivo src/components/Workflow.jsx  
// 3. LOCALIZE a fun√ß√£o login atual (linha ~760-900)
// 4. SUBSTITUA toda a fun√ß√£o login pela vers√£o acima
// 5. SALVE o arquivo
// 6. TESTE o login com senha "1533"
//
// ‚ö†Ô∏è IMPORTANTE:
// - Execute a migra√ß√£o ANTES de implementar este c√≥digo
// - Todos os usu√°rios migrados usar√£o senha "1533"  
// - Usu√°rios n√£o migrados ainda usar√£o senhas antigas (fallback)
// - Verifique os logs do console para acompanhar o processo
//
// ==============================================================================