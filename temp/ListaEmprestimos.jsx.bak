import React, { useState } from 'react';
import { Search, CheckCircle, Clock, Trash2, CircleDotDashed } from 'lucide-react';
import { useAuth } from '../../hooks/useAuth';

import { NIVEIS_PERMISSAO } from '../../constants/permissoes';import { NIVEIS_PERMISSAO } from '../../constants/permissoes';

import { doc, updateDoc, arrayUnion } from 'firebase/firestore';import { doc, updateDoc, arrayUnion } from 'firebase/firestore';

import { db } from '../../firebaseConfig';import { db } from '../../firebaseConfig';

import { formatarDataHora } from '../../utils/formatters';import { formatarDataHora } from '../../utils/formatters';

import DevolucaoTerceirosModal from './DevolucaoTerceirosModal';import DevolucaoTerceirosModal from './DevolucaoTerceirosModal';

import DevolucaoParcialModal from './DevolucaoParcialModal';import DevolucaoParcialModal from './DevolucaoParcialModal';



const ListaEmprestimos = ({ const ListaEmprestimos = ({ 

  emprestimos = [],   emprestimos = [], 

  devolverFerramentas = () => {},  devolverFerramentas = () => {},

  removerEmprestimo = () => {},  removerEmprestimo = () => {},

  atualizarDisponibilidade = () => true  atualizarDisponibilidade = () => true

}) => {}) => {

  const [filtroEmprestimos, setFiltroEmprestimos] = useState('');  const [filtroEmprestimos, setFiltroEmprestimos] = useState('');

  const [filtroPeriodo, setFiltroPeriodo] = useState('hoje');  const [filtroPeriodo, setFiltroPeriodo] = useState('hoje');

  const [filtroStatus, setFiltroStatus] = useState('emprestado');  const [filtroStatus, setFiltroStatus] = useState('emprestado');

  const [showDevolucaoModal, setShowDevolucaoModal] = useState(false);  const [showDevolucaoModal, setShowDevolucaoModal] = useState(false);

  const [showDevolucaoParcialModal, setShowDevolucaoParcialModal] = useState(false);  const [showDevolucaoParcialModal, setShowDevolucaoParcialModal] = useState(false);

  const [selectedEmprestimo, setSelectedEmprestimo] = useState(null);  const [selectedEmprestimo, setSelectedEmprestimo] = useState(null);

  const [emprestimoParaDevolucaoParcial, setEmprestimoParaDevolucaoParcial] = useState(null);  const [emprestimoParaDevolucaoParcial, setEmprestimoParaDevolucaoParcial] = useState(null);

  const [showConfirmacaoExclusao, setShowConfirmacaoExclusao] = useState(false);  const [showConfirmacaoExclusao, setShowConfirmacaoExclusao] = useState(false);

  const [emprestimoParaExcluir, setEmprestimoParaExcluir] = useState(null);  const [emprestimoParaExcluir, setEmprestimoParaExcluir] = useState(null);

  const [expandedEmployees, setExpandedEmployees] = useState(new Set());  const [expandedEmployees, setExpandedEmployees] = useState(new Set());

  const { usuario } = useAuth();  const { usuario } = useAuth();

    

  const temPermissaoEdicao = usuario && usuario.nivel >= NIVEIS_PERMISSAO.SUPERVISOR;  const temPermissaoEdicao = usuario && usuario.nivel >= NIVEIS_PERMISSAO.SUPERVISOR;



  const toggleEmployee = (employee) => {  const toggleEmployee = (employee) => {

    const newExpanded = new Set(expandedEmployees);    const newExpanded = new Set(expandedEmployees);

    if (newExpanded.has(employee)) {    if (newExpanded.has(employee)) {

      newExpanded.delete(employee);      newExpanded.delete(employee);

    } else {    } else {

      newExpanded.add(employee);      newExpanded.add(employee);

    }    }

    setExpandedEmployees(newExpanded);    setExpandedEmployees(newExpanded);

  };  };



  const isWithinPeriod = (date, period) => {  const isWithinPeriod = (date, period) => {

    if (!date) return false;    if (!date) return false;

    const today = new Date();    const today = new Date();

    const empDate = new Date(date);    const empDate = new Date(date);

        

    switch (period) {    switch (period) {

      case 'hoje':      case 'hoje':

        return empDate.getDate() === today.getDate() &&        return empDate.getDate() === today.getDate() &&

               empDate.getMonth() === today.getMonth() &&               empDate.getMonth() === today.getMonth() &&

               empDate.getFullYear() === today.getFullYear();               empDate.getFullYear() === today.getFullYear();

      case 'semana':      case 'semana':

        const weekAgo = new Date(today);        const weekAgo = new Date(today);

        weekAgo.setDate(today.getDate() - 7);        weekAgo.setDate(today.getDate() - 7);

        return empDate >= weekAgo;        return empDate >= weekAgo;

      case 'mes':      case 'mes':

        const monthAgo = new Date(today);        const monthAgo = new Date(today);

        monthAgo.setMonth(today.getMonth() - 1);        monthAgo.setMonth(today.getMonth() - 1);

        return empDate >= monthAgo;        return empDate >= monthAgo;

      default:      default:

        return true;        return true;

    }    }

  };  };



  const emprestimosFiltrados = (emprestimos || [])  const emprestimosFiltrados = (emprestimos || [])

    .filter(emp => {    .filter(emp => {

      if (!emp || !emp.dataEmprestimo) return false;      if (!emp || !emp.dataEmprestimo) return false;

            

      // Filtra por período      // Filtra por período

      if (!isWithinPeriod(emp.dataEmprestimo, filtroPeriodo)) return false;      if (!isWithinPeriod(emp.dataEmprestimo, filtroPeriodo)) return false;



      // Filtra por status      // Filtra por status

      if (filtroStatus !== 'todos' && emp.status !== filtroStatus) return false;      if (filtroStatus !== 'todos' && emp.status !== filtroStatus) return false;



      const funcionario = (emp.nomeFuncionario || emp.colaborador || '').toLowerCase();      const funcionario = (emp.nomeFuncionario || emp.colaborador || '').toLowerCase();

      const ferramentas = emp.nomeFerramentas || [];      const ferramentas = emp.nomeFerramentas || [];

      const filtro = filtroEmprestimos.toLowerCase();      const filtro = filtroEmprestimos.toLowerCase();

            

      return funcionario.includes(filtro) ||      return funcionario.includes(filtro) ||

             ferramentas.some(f => f.toLowerCase().includes(filtro));             ferramentas.some(f => f.toLowerCase().includes(filtro));

    })    })

    .sort((a, b) => {    .sort((a, b) => {

      // Ordena por data/hora de empréstimo mais recente primeiro      // Ordena por data/hora de empréstimo mais recente primeiro

      const dataA = a?.dataEmprestimo ? new Date(a.dataEmprestimo) : new Date();      const dataA = a?.dataEmprestimo ? new Date(a.dataEmprestimo) : new Date();

      const dataB = b?.dataEmprestimo ? new Date(b.dataEmprestimo) : new Date();      const dataB = b?.dataEmprestimo ? new Date(b.dataEmprestimo) : new Date();

      return dataB - dataA;      return dataB - dataA;

    });    });



  // Agrupa os empréstimos por funcionário  // Agrupa os empréstimos por funcionário

  const emprestimosPorFuncionario = emprestimosFiltrados.reduce((acc, emp) => {  const emprestimosPorFuncionario = emprestimosFiltrados.reduce((acc, emp) => {

    const funcionario = emp.nomeFuncionario || emp.colaborador || 'Sem nome';    const funcionario = emp.nomeFuncionario || emp.colaborador || 'Sem nome';

    if (!acc[funcionario]) {    if (!acc[funcionario]) {

      acc[funcionario] = [];      acc[funcionario] = [];

    }    }

    acc[funcionario].push(emp);    acc[funcionario].push(emp);

    return acc;    return acc;

  }, {});  }, {});



  const handleDevolverFerramentas = (id) => {  const handleDevolverFerramentas = (id) => {

    const emprestimo = emprestimos.find(e => e.id === id);    const emprestimo = emprestimos.find(e => e.id === id);

    if (!emprestimo) return;    if (!emprestimo) return;



    if (emprestimo.ferramentas?.length > 1) {    if (emprestimo.ferramentas?.length > 1) {

      setEmprestimoParaDevolucaoParcial(emprestimo);      setEmprestimoParaDevolucaoParcial(emprestimo);

      setShowDevolucaoParcialModal(true);      setShowDevolucaoParcialModal(true);

    } else {    } else {

      setSelectedEmprestimo(id);      setSelectedEmprestimo(id);

      setShowDevolucaoModal(true);      setShowDevolucaoModal(true);

    }    }

  };  };



  const handleDevolverFerramentasParcial = (emprestimo, ferramentasSelecionadas, devolvidoPorTerceiros) => {  const handleDevolverFerramentasParcial = (emprestimo, ferramentasSelecionadas, devolvidoPorTerceiros) => {

    if (!emprestimo || !ferramentasSelecionadas.length) return;    if (!emprestimo || !ferramentasSelecionadas.length) return;



    const ferramentasNaoDevolvidas = emprestimo.ferramentas.filter(    const ferramentasNaoDevolvidas = emprestimo.ferramentas.filter(

      f => !ferramentasSelecionadas.find(fs => fs.id === f.id)      f => !ferramentasSelecionadas.find(fs => fs.id === f.id)

    );    );



    if (ferramentasNaoDevolvidas.length === 0) {    if (ferramentasNaoDevolvidas.length === 0) {

      devolverFerramentas(emprestimo.id, atualizarDisponibilidade, devolvidoPorTerceiros);      devolverFerramentas(emprestimo.id, atualizarDisponibilidade, devolvidoPorTerceiros);

    } else {    } else {

      const atualizacao = {      const atualizacao = {

        ferramentas: ferramentasNaoDevolvidas,        ferramentas: ferramentasNaoDevolvidas,

        ferramentasParcialmenteDevolvidas: [        ferramentasParcialmenteDevolvidas: [

          ...(emprestimo.ferramentasParcialmenteDevolvidas || []),          ...(emprestimo.ferramentasParcialmenteDevolvidas || []),

          {          {

            ferramentas: ferramentasSelecionadas,            ferramentas: ferramentasSelecionadas,

            dataDevolucao: new Date().toISOString(),            dataDevolucao: new Date().toISOString(),

            devolvidoPorTerceiros            devolvidoPorTerceiros

          }          }

        ]        ]

      };      };

            

      if (typeof devolverFerramentas === 'function') {      if (typeof devolverFerramentas === 'function') {

        devolverFerramentas(emprestimo.id, atualizarDisponibilidade, devolvidoPorTerceiros, atualizacao);        devolverFerramentas(emprestimo.id, atualizarDisponibilidade, devolvidoPorTerceiros, atualizacao);

      }      }

    }    }

    setShowDevolucaoParcialModal(false);    setShowDevolucaoParcialModal(false);

    setEmprestimoParaDevolucaoParcial(null);    setEmprestimoParaDevolucaoParcial(null);

  };  };



  const handleConfirmDevolucao = async (devolvidoPorTerceiros) => {  const handleConfirmDevolucao = async (devolvidoPorTerceiros) => {

    try {    try {

      if (typeof devolverFerramentas === 'function') {      if (typeof devolverFerramentas === 'function') {

        await devolverFerramentas(selectedEmprestimo, atualizarDisponibilidade, devolvidoPorTerceiros);        await devolverFerramentas(selectedEmprestimo, atualizarDisponibilidade, devolvidoPorTerceiros);

        setSelectedEmprestimo(null);        setSelectedEmprestimo(null);

        setShowDevolucaoModal(false);        setShowDevolucaoModal(false);

      }      }

    } catch (error) {    } catch (error) {

      console.error('Erro ao devolver ferramentas:', error);      console.error('Erro ao devolver ferramentas:', error);

    }    }

  };  };



  const handleRemoverEmprestimo = (emprestimo) => {  const handleRemoverEmprestimo = (emprestimo) => {

    setEmprestimoParaExcluir(emprestimo);    setEmprestimoParaExcluir(emprestimo);

    setShowConfirmacaoExclusao(true);    setShowConfirmacaoExclusao(true);

  };  };



  const confirmarExclusao = () => {  const confirmarExclusao = () => {

    if (emprestimoParaExcluir) {    if (emprestimoParaExcluir) {

      removerEmprestimo(emprestimoParaExcluir.id, atualizarDisponibilidade);      removerEmprestimo(emprestimoParaExcluir.id, atualizarDisponibilidade);

    }    }

    setShowConfirmacaoExclusao(false);    setShowConfirmacaoExclusao(false);

    setEmprestimoParaExcluir(null);    setEmprestimoParaExcluir(null);

  };  };



  const cancelarExclusao = () => {  const cancelarExclusao = () => {

    setShowConfirmacaoExclusao(false);    setShowConfirmacaoExclusao(false);

    setEmprestimoParaExcluir(null);    setEmprestimoParaExcluir(null);

  };  };



  // Verifica se há ferramentas emprestadas no array de ferramentas  // Verifica se há ferramentas emprestadas no array de ferramentas

  const temFerramentasEmprestadas = (emprestimo) => {  const temFerramentasEmprestadas = (emprestimo) => {

    return emprestimo.ferramentas && emprestimo.ferramentas.length > 0;    return emprestimo.ferramentas && emprestimo.ferramentas.length > 0;

  };  };



  return (  return (

    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">

      <div className="flex justify-between items-center mb-4">      <div className="flex justify-between items-center mb-4">

        <div className="flex gap-4 items-center">        <div className="flex gap-4 items-center">

          <div className="relative flex-1 min-w-[250px]">          <div className="relative flex-1 min-w-[250px]">

            <Search className="w-4 h-4 absolute left-2.5 top-1/2 -translate-y-1/2 text-gray-400" />            <Search className="w-4 h-4 absolute left-2.5 top-1/2 -translate-y-1/2 text-gray-400" />

            <input            <input

              type="text"              type="text"

              placeholder="Buscar colaborador/ferramenta..."              placeholder="Buscar colaborador/ferramenta..."

              value={filtroEmprestimos}              value={filtroEmprestimos}

              onChange={(e) => setFiltroEmprestimos(e.target.value)}              onChange={(e) => setFiltroEmprestimos(e.target.value)}

              className="w-full h-9 pl-8 pr-3 text-sm border border-gray-300 dark:border-[#38444D] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#1D9BF0] dark:bg-[#253341] dark:text-white dark:placeholder-gray-500"              className="w-full h-9 pl-8 pr-3 text-sm border border-gray-300 dark:border-[#38444D] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#1D9BF0] dark:bg-[#253341] dark:text-white dark:placeholder-gray-500"

            />            />

          </div>          </div>

          <select          <select

            value={filtroStatus}            value={filtroStatus}

            onChange={(e) => setFiltroStatus(e.target.value)}            onChange={(e) => setFiltroStatus(e.target.value)}

            className="border border-gray-300 dark:border-[#38444D] rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-[#1D9BF0] dark:bg-[#253341] dark:text-white hover:bg-gray-50 dark:hover:bg-gray-700"            className="border border-gray-300 dark:border-[#38444D] rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-[#1D9BF0] dark:bg-[#253341] dark:text-white hover:bg-gray-50 dark:hover:bg-gray-700"

          >          >

            <option value="todos">Todos os status</option>            <option value="todos">Todos os status</option>

            <option value="emprestado">Não devolvidos</option>            <option value="emprestado">Não devolvidos</option>

            <option value="devolvido">Devolvidos</option>            <option value="devolvido">Devolvidos</option>

          </select>          </select>

          <select          <select

            value={filtroPeriodo}            value={filtroPeriodo}

            onChange={(e) => setFiltroPeriodo(e.target.value)}            onChange={(e) => setFiltroPeriodo(e.target.value)}

            className="border border-gray-300 dark:border-[#38444D] rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-[#1D9BF0] dark:bg-[#253341] dark:text-white hover:bg-gray-50 dark:hover:bg-gray-700"            className="border border-gray-300 dark:border-[#38444D] rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-[#1D9BF0] dark:bg-[#253341] dark:text-white hover:bg-gray-50 dark:hover:bg-gray-700"

          >          >

            <option value="hoje">Hoje</option>            <option value="hoje">Hoje</option>

            <option value="semana">Última semana</option>            <option value="semana">Última semana</option>

            <option value="mes">Último mês</option>            <option value="mes">Último mês</option>

            <option value="todos">Todo o período</option>            <option value="todos">Todo o período</option>

          </select>          </select>

        </div>        </div>

      </div>      </div>



      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">

        {Object.entries(emprestimosPorFuncionario).map(([funcionario, emprestimos]) => (        {Object.entries(emprestimosPorFuncionario).map(([funcionario, emprestimos]) => (

          <div           <div 

            key={funcionario}             key={funcionario} 

            className={`bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all duration-200 ${            className={`bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all duration-200 ${

              expandedEmployees.has(funcionario) ? 'ring-2 ring-blue-500' : ''              expandedEmployees.has(funcionario) ? 'ring-2 ring-blue-500' : ''

            }`}            }`}

            onClick={() => toggleEmployee(funcionario)}            onClick={() => toggleEmployee(funcionario)}

          >          >

            <div className="relative overflow-hidden h-32 bg-gradient-to-r from-blue-500 to-blue-600 group cursor-pointer">            <div className="relative overflow-hidden h-32 bg-gradient-to-r from-blue-500 to-blue-600 group cursor-pointer">

              <div className="absolute inset-0 bg-black opacity-20 group-hover:opacity-10 transition-opacity duration-200"></div>              <div className="absolute inset-0 bg-black opacity-20 group-hover:opacity-10 transition-opacity duration-200"></div>

              <div className="absolute inset-0 p-6 flex flex-col justify-between transform group-hover:scale-[1.02] transition-transform duration-200">              <div className="absolute inset-0 p-6 flex flex-col justify-between transform group-hover:scale-[1.02] transition-transform duration-200">

                <div className="flex justify-between items-start">                <div className="flex justify-between items-start">

                  <h3 className="text-xl font-bold text-white">{funcionario}</h3>                  <h3 className="text-xl font-bold text-white">{funcionario}</h3>

                  <button className="text-white hover:text-gray-200 transition-colors">                  <button className="text-white hover:text-gray-200 transition-colors">

                    {expandedEmployees.has(funcionario) ? '▼' : '▶'}                    {expandedEmployees.has(funcionario) ? '▼' : '▶'}

                  </button>                  </button>

                </div>                </div>

                <div className="flex items-center gap-2">                <div className="flex items-center gap-2">

                  <span className="bg-white text-blue-600 text-sm font-semibold px-3 py-1 rounded-full shadow transform group-hover:scale-105 transition-transform duration-200">                  <span className="bg-white text-blue-600 text-sm font-semibold px-3 py-1 rounded-full shadow transform group-hover:scale-105 transition-transform duration-200">

                    {emprestimos.length} empréstimo{emprestimos.length !== 1 ? 's' : ''}                    {emprestimos.length} empréstimo{emprestimos.length !== 1 ? 's' : ''}

                  </span>                  </span>

                  <div className="flex items-center gap-2">                  <div className="flex items-center gap-2">

                    <span className="bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-100 text-xs font-medium px-2 py-0.5 rounded">                    <span className="bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-100 text-xs font-medium px-2 py-0.5 rounded">

                      {emprestimos.filter(e => e.status === 'emprestado').length} ativos                      {emprestimos.filter(e => e.status === 'emprestado').length} ativos

                    </span>                    </span>

                    <span className="bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-100 text-xs font-medium px-2 py-0.5 rounded">                    <span className="bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-100 text-xs font-medium px-2 py-0.5 rounded">

                      {emprestimos.filter(e => e.status === 'devolvido').length} concluídos                      {emprestimos.filter(e => e.status === 'devolvido').length} concluídos

                    </span>                    </span>

                  </div>                  </div>

                </div>                </div>

              </div>              </div>

            </div>            </div>

                        

            {expandedEmployees.has(funcionario) && (            {expandedEmployees.has(funcionario) && (

              <div className="bg-gray-50 dark:bg-gray-700/50 divide-y divide-gray-200 dark:divide-gray-600">              <div className="bg-gray-50 dark:bg-gray-700/50 divide-y divide-gray-200 dark:divide-gray-600">

                <div className="max-h-[32rem] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent">                <div className="max-h-[32rem] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent">

                  <div className="space-y-3 p-4 divide-y divide-gray-100 dark:divide-gray-600">                  <div className="space-y-3 p-4 divide-y divide-gray-100 dark:divide-gray-600">

                    {emprestimos.map(emprestimo => (                    {emprestimos.map(emprestimo => (

                      <div key={emprestimo.id} className="bg-white dark:bg-gray-700/50 rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-all duration-200 pt-4">                  <div key={emprestimo.id} className="bg-white dark:bg-gray-700/50 rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-all duration-200 pt-4">

                        <div className="px-4 pb-4">                    <div className="px-4 pb-4">

                          {/* Status do Empréstimo */}                      {/* Status do Empréstimo */}

                          <div className="flex justify-between items-start mb-4">                      <div className="flex justify-between items-start mb-4">

                            <div className="flex items-center gap-2">                        <div className="flex items-center gap-2">

                              <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${                          <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${

                                emprestimo.status === 'emprestado'                            emprestimo.status === 'emprestado'

                                  ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100'                              ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100'

                                  : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100'                              : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100'

                              }`}>                          }`}>

                                {emprestimo.status === 'emprestado' ? (                            {emprestimo.status === 'emprestado' ? (

                                  <><Clock className="w-3 h-3 inline mr-1" />Emprestado</>                              <><Clock className="w-3 h-3 inline mr-1" />Emprestado</>

                                ) : (                            ) : (

                                  <><CheckCircle className="w-3 h-3 inline mr-1" />Devolvido</>                              <><CheckCircle className="w-3 h-3 inline mr-1" />Devolvido</>

                                )}                            )}

                              </div>                          </div>

                              <span className="text-xs text-gray-500 dark:text-gray-400">                          <span className="text-xs text-gray-500 dark:text-gray-400">

                                {formatarDataHora(emprestimo.dataEmprestimo)}                            {formatarDataHora(emprestimo.dataEmprestimo)}

                              </span>                          </span>

                            </div>                        </div>

                            <div className="flex gap-2">                        <div className="flex gap-2">

                              {emprestimo.status === 'emprestado' && temFerramentasEmprestadas(emprestimo) && (                          {emprestimo.status === 'emprestado' && temFerramentasEmprestadas(emprestimo) && (

                                <button                            <button

                                  onClick={(e) => {                              onClick={() => handleDevolverFerramentas(emprestimo.id)}

                                    e.stopPropagation();                              className="text-green-600 hover:text-green-800 p-1.5 transition-colors duration-200 rounded-full hover:bg-green-100 dark:hover:bg-green-900"

                                    handleDevolverFerramentas(emprestimo.id);                              title="Marcar como devolvido"

                                  }}                            >

                                  className="text-green-600 hover:text-green-800 p-1.5 transition-colors duration-200 rounded-full hover:bg-green-100 dark:hover:bg-green-900"                              <CheckCircle className="w-5 h-5" />

                                  title="Marcar como devolvido"                            </button>

                                >                          )}

                                  <CheckCircle className="w-5 h-5" />                          <button

                                </button>                            onClick={() => handleRemoverEmprestimo(emprestimo)}

                              )}                            className="text-red-600 hover:text-red-800 p-1.5 transition-colors duration-200 rounded-full hover:bg-red-100 dark:hover:bg-red-900"

                              <button                            title="Remover registro"

                                onClick={(e) => {                          >

                                  e.stopPropagation();                            <Trash2 className="w-5 h-5" />

                                  handleRemoverEmprestimo(emprestimo);                          </button>

                                }}                        </div>

                                className="text-red-600 hover:text-red-800 p-1.5 transition-colors duration-200 rounded-full hover:bg-red-100 dark:hover:bg-red-900"                      </div>

                                title="Remover registro"

                              >                      {/* Lista de Ferramentas */}

                                <Trash2 className="w-5 h-5" />                      <div className="space-y-2 mb-4">

                              </button>                        <h4 className="text-sm font-medium text-gray-500 dark:text-gray-400">Ferramentas:</h4>

                            </div>                        <div className="space-y-1">

                          </div>                          {Array.isArray(emprestimo?.ferramentas) ? (

                            emprestimo.ferramentas.map((ferramenta, idx) => {

                          {/* Lista de Ferramentas */}                              const ferramentaDevolvida = emprestimo.ferramentasParcialmenteDevolvidas?.some(

                          <div className="space-y-2 mb-4">                                devolucao => devolucao.ferramentas.some(f => f.id === ferramenta.id)

                            <h4 className="text-sm font-medium text-gray-500 dark:text-gray-400">Ferramentas:</h4>                              );

                            <div className="space-y-1">                              

                              {Array.isArray(emprestimo?.ferramentas) ? (                              return (

                                emprestimo.ferramentas.map((ferramenta, idx) => {                                <div 

                                  const ferramentaDevolvida = emprestimo.ferramentasParcialmenteDevolvidas?.some(                                  key={idx} 

                                    devolucao => devolucao.ferramentas.some(f => f.id === ferramenta.id)                                  className={`flex items-center gap-2 text-sm ${

                                  );                                    ferramentaDevolvida ? 'text-gray-400 dark:text-gray-500' : 'text-gray-700 dark:text-gray-200'

                                                                    }`}

                                  return (                                >

                                    <div                                   <CircleDotDashed className={`w-3 h-3 ${ferramentaDevolvida ? 'text-gray-400' : ''}`} />

                                      key={idx}                                   <span className={ferramentaDevolvida ? 'line-through' : ''}>

                                      className={`flex items-center gap-2 text-sm ${                                    {ferramenta.nome}

                                        ferramentaDevolvida ? 'text-gray-400 dark:text-gray-500' : 'text-gray-700 dark:text-gray-200'                                    {ferramenta.quantidade > 1 && (

                                      }`}                                      <span className="text-gray-500 dark:text-gray-400 ml-1">({ferramenta.quantidade} unidades)</span>

                                    >                                    )}

                                      <CircleDotDashed className={`w-3 h-3 ${ferramentaDevolvida ? 'text-gray-400' : ''}`} />                                  </span>

                                      <span className={ferramentaDevolvida ? 'line-through' : ''}>                                </div>

                                        {ferramenta.nome}                              );

                                        {ferramenta.quantidade > 1 && (                            })

                                          <span className="text-gray-500 dark:text-gray-400 ml-1">({ferramenta.quantidade} unidades)</span>                          ) : (

                                        )}                            <div className="text-sm text-gray-500">Sem ferramentas</div>

                                      </span>                          )}

                                    </div>                        </div>

                                  );                      </div>

                                })

                              ) : (                      {/* Datas */}

                                <div className="text-sm text-gray-500">Sem ferramentas</div>                      <div className="space-y-2 text-sm">

                              )}                        <div className="flex justify-between text-gray-600 dark:text-gray-300">

                            </div>                          <span>Retirada:</span>

                          </div>                          <span>{formatarDataHora(emprestimo.dataEmprestimo)}</span>

                        </div>

                          {/* Datas */}                        <div className="flex justify-between text-gray-600 dark:text-gray-300">

                          <div className="space-y-2 text-sm">                          <span>Devolução:</span>

                            <div className="flex justify-between text-gray-600 dark:text-gray-300">                          <span>

                              <span>Devolução:</span>                            {emprestimo.dataDevolucao ? (

                              <span>                              <div className="text-right">

                                {emprestimo.dataDevolucao ? (                                <div>{formatarDataHora(emprestimo.dataDevolucao)}</div>

                                  <div className="text-right">                                {emprestimo.devolvidoPorTerceiros && (

                                    <div>{formatarDataHora(emprestimo.dataDevolucao)}</div>                                  <div className="text-xs text-orange-600 mt-1">

                                    {emprestimo.devolvidoPorTerceiros && (                                    Devolvido por terceiros

                                      <div className="text-xs text-orange-600 mt-1">                                  </div>

                                        Devolvido por terceiros                                )}

                                      </div>                              </div>

                                    )}                            ) : (

                                  </div>                              <span className="text-gray-400">-</span>

                                ) : (                            )}

                                  <span className="text-gray-400">-</span>                          </span>

                                )}                        </div>

                              </span>                      </div>

                            </div>                    </div>

                          </div>                  </div>

                        </div>                ))}

                      </div>              </div>

                    ))}            )}

                  </div>          </div>

                </div>        ))}

              </div>      </div>

            )}

          </div>      {/* Modal de confirmação de devolução */}

        ))}      {showDevolucaoModal && (

      </div>        <DevolucaoTerceirosModal 

          isOpen={showDevolucaoModal}

      {showDevolucaoModal && (          onClose={() => setShowDevolucaoModal(false)}

        <DevolucaoTerceirosModal           onConfirm={handleConfirmDevolucao}

          isOpen={showDevolucaoModal}        />

          onClose={() => setShowDevolucaoModal(false)}      )}

          onConfirm={handleConfirmDevolucao}

        />      {/* Modal de devolução parcial */}

      )}      {showDevolucaoParcialModal && emprestimoParaDevolucaoParcial && (

        <DevolucaoParcialModal

      {showDevolucaoParcialModal && emprestimoParaDevolucaoParcial && (          isOpen={showDevolucaoParcialModal}

        <DevolucaoParcialModal          onClose={() => {

          isOpen={showDevolucaoParcialModal}            setShowDevolucaoParcialModal(false);

          onClose={() => {            setEmprestimoParaDevolucaoParcial(null);

            setShowDevolucaoParcialModal(false);          }}

            setEmprestimoParaDevolucaoParcial(null);          onConfirm={handleDevolverFerramentasParcial}

          }}          emprestimo={emprestimoParaDevolucaoParcial}

          onConfirm={handleDevolverFerramentasParcial}        />

          emprestimo={emprestimoParaDevolucaoParcial}      )}

        />

      )}      {/* Modal de confirmação de exclusão */}

      {showConfirmacaoExclusao && (

      {showConfirmacaoExclusao && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">

        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full">

          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full">            <h2 className="text-xl font-semibold mb-4">Confirmar exclusão</h2>

            <h2 className="text-xl font-semibold mb-4">Confirmar exclusão</h2>            <p className="mb-6">Tem certeza que deseja remover este registro de empréstimo?</p>

            <p className="mb-6">Tem certeza que deseja remover este registro de empréstimo?</p>            <div className="flex justify-end gap-4">

            <div className="flex justify-end gap-4">              <button

              <button                onClick={cancelarExclusao}

                onClick={cancelarExclusao}                className="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-200"

                className="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-200"              >

              >                Cancelar

                Cancelar              </button>

              </button>              <button

              <button                onClick={confirmarExclusao}

                onClick={confirmarExclusao}                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200"

                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200"              >

              >                Excluir

                Excluir              </button>

              </button>            </div>

            </div>          </div>

          </div>        </div>

        </div>      )}

      )}    </div>

    </div>  );

  );};

};

export default ListaEmprestimos;
export default ListaEmprestimos;